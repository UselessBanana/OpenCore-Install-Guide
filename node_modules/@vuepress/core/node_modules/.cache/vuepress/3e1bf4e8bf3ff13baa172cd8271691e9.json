{"remainingRequest":"/Users/banana/Desktop/GIT/OpenCore-Install-Guide/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/banana/Desktop/GIT/OpenCore-Install-Guide/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/banana/Desktop/GIT/OpenCore-Install-Guide/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/banana/Desktop/GIT/OpenCore-Install-Guide/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/banana/Desktop/GIT/OpenCore-Install-Guide/CONTRIBUTING.md?vue&type=template&id=1175f765&","dependencies":[{"path":"/Users/banana/Desktop/GIT/OpenCore-Install-Guide/CONTRIBUTING.md","mtime":1603146013258},{"path":"/Users/banana/Desktop/GIT/OpenCore-Install-Guide/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/banana/Desktop/GIT/OpenCore-Install-Guide/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/banana/Desktop/GIT/OpenCore-Install-Guide/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/banana/Desktop/GIT/OpenCore-Install-Guide/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/banana/Desktop/GIT/OpenCore-Install-Guide/node_modules/@vuepress/markdown-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgIkNvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yIiwKICAgIHsgYXR0cnM6IHsgInNsb3Qta2V5IjogX3ZtLiRwYXJlbnQuc2xvdEtleSB9IH0sCiAgICBbCiAgICAgIF9jKCJoMSIsIHsgYXR0cnM6IHsgaWQ6ICJhcG95YW5kby1sYXMtZ3VpYXMiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2Fwb3lhbmRvLWxhcy1ndWlhcyIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIEFwb3lhbmRvIGxhcyBndcOtYXMiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJOb3RhIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiOiBFc3RhIGVzIHVuYSBndcOtYSBkZSBsYSBjb211bmlkYWQgcXVlIG5vIGVzdMOhIHJlc3BhbGRhZGEgb2ZpY2lhbG1lbnRlIHBvciBBY2lkYW50aGVyYS4gUG9yIGZhdm9yIG5vIG1vbGVzdGVuIGEgQWNpZGFudGhlcmEgY29uIHByb2JsZW1hcyBkZSBlc3RhIGd1w61hLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIsK/UXVpZXJlcyBheXVkYXIgYSBhcG95YXIgbGEgZ3XDrWE/IEJ1ZW5vLCBoYXkgYWxndW5hcyBtYW5lcmFzIGVuIGxhcyBxdWUgcHVlZGVzIGF5dWRhciEiCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogIiNjb250cmlidWlyLXZpYS1wcm9ibGVtYXMtaXNzdWVzIiB9IH0sIFsKICAgICAgICAgICAgX3ZtLl92KCJDb250cmlidWlyIHZpYSBwcm9ibG1lYXMiKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogIiNjb250cmlidWlyLXZpYS1wdWxsLXJlcXVlc3RzIiB9IH0sIFsKICAgICAgICAgICAgX3ZtLl92KCJDb250cmlidWlyIHZpYSBQdWxsIFJlcXVlc3RzIikKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoImEiLCB7IGF0dHJzOiB7IGhyZWY6ICIjY29udHJpYnVpci12aWEtdHJhZHVjY2lvbmVzIiB9IH0sIFsKICAgICAgICAgICAgX3ZtLl92KCJDb250cmlidWlyIHZpYSBUcmFkdWNjaW9uZXMiKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJOb3RhOiBQYXJhIGFxdWVsbG9zIHF1ZSBxdWllcmFuIGNvbnRyaWJ1aXIgZmluYW5jaWVyYW1lbnRlLCBsbyBhcHJlY2lhbW9zIG11Y2hvLCBwZXJvIHNvbW9zIHVuYSBvcmdhbml6YWNpw7NuIHNpbiBmaW5lcyBkZSBsdWNyby4gSGFjZW1vcyBlc3RvIHBhcmEgZW5zZcOxYXIsIG5vIHBhcmEgZ2FuYXIgZGluZXJvLiBTaSB0ZSBzb2JyYSBkaW5lcm8sIHRlIHJlY29tZW5kYW1vcyBxdWUgbG8gZG9uZXMgYSB1bmEgb3JnYW5pemFjacOzbiBiZW7DqWZpY2EuICIKICAgICAgICApLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIGhyZWY6CiAgICAgICAgICAgICAgICAiaHR0cHM6Ly9jcm9obnNhbmRjb2xpdGlzLmRvbm9ycG9ydGFsLmNhL0RvbmF0aW9uL0RvbmF0aW9uRGV0YWlscy5hc3B4P0w9ZW4tQ0EmRz0xNTkmRj0xMDk3JlQ9R0VORVIiLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIkNyb2huJ3MgYW5kIENvbGl0aXMgQ2FuYWRhIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBlcyB1bmEgcXVlIHJlY29tZW5kYW1vcyBzaSBubyB0aWVuZXMgbmluZ3VuYSBlbiBtZW50ZS4iKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJjb250cmlidWlyLXZpYS1wcm9ibGVtYXMtaXNzdWVzIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNjb250cmlidWlyLXZpYS1wcm9ibGVtYXMtaXNzdWVzIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgQ29udHJpYnVpciB2aWEgcHJvYmxlbWFzIChpc3N1ZXMpIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiQ29udHJpYnVpciBhIHRyYXbDqXMgZGUgcHJvYmxlbWFzIGVzIGJhc3RhbnRlIHNpbXBsZSBwZXJvIGhheSBjaWVydGFzIHJlZ2xhczoiCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJNYW50w6luIGxhIHBlc3Rhw7FhIGRlIHByb2JsZW1hcyBjb24gdGVtYXMgZGVkaWNhZG9zIHNvbG8gYSBwcm9ibGVtYXMgZGUgbGFzIGd1w61hcywgIgogICAgICAgICAgKSwKICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJ5IG5vIGNvbiBwcm9ibGVtYXMgZGUgaGFja2ludG9zaCBwZXJzb25hbGVzIildKSwKICAgICAgICAgIF92bS5fdigiLiBObyBlcyBlbCBsdWdhciBwYXJhIGRpc2N1dGlyIHByb2JsZW1hcyBkZSB0dSBpbnN0YWxhY2nDs24uIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJTaSBzZSB0cmF0YSBkZSB1biBlcnJvciB0aXBvZ3LDoWZpY28gbyBkZSB1bmEgbWVqb3IgYWNsYXJhY2nDs24sIGluZGljYSBlbiBxdcOpIHDDoWdpbmEgZXN0YWJhLiBBZ3JhZGVjZXLDrWFtb3Mgbm8gaXIgYSB1bmEgYsO6c3F1ZWRhIGRlbCB0ZXNvcm8gcGFyYSBlbmNvbnRyYXIgZMOzbmRlIGVzdMOhbiBlc3RvcyBwcm9ibGVtYXMuIgogICAgICAgICAgKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJQdWVkZXMgZW5jb250cmFyIGVsIGJ1Z3RyYWNrZXIgYXF1w606ICIpLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2dpdGh1Yi5jb20vZG9ydGFuaWEvYnVndHJhY2tlciIsCiAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiQnVndHJhY2tlciIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgMQogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiY29udHJpYnVpci12aWEtcHVsbC1yZXF1ZXN0cyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjY29udHJpYnVpci12aWEtcHVsbC1yZXF1ZXN0cyIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIENvbnRyaWJ1aXIgdmlhIHB1bGwgcmVxdWVzdHMiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW192bS5fdigiQWxndW5hcyBwYXV0YXMgYWwgY29udHJpYnVpciBhIHRyYXbDqXMgZGUgUFJzOiIpXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiVXNhIHR1IGNlcmVicm8gKHBvciBmYXZvcikuIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJSZXZpc2EgdHVzIHByZXNlbnRhY2lvbmVzLiIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiUG9kZW1vcyBkZW5lZ2FyIGxvcyBQUnMgc2kgY29uc2lkZXJhbW9zIHF1ZSBubyBlbmNhamEgZW4gbGEgZ3XDrWEgbyB0aWVuZSBpbmZvcm1hY2nDs24gaW5leGFjdGEuIEdlbmVyYWxtZW50ZSB0ZSBkaXJlbW9zIHBvciBxdcOpIGxvIHJlY2hhemFtb3MgbyBwZWRpcmVtb3MgcmV2aXNpb25lcy5cbiIKICAgICAgICAgICksCiAgICAgICAgICBfYygidWwiLCBbCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiRW4gZWwgY2FzbyBkZSBxdWUgc2VhbiBjb250cmlidWNpb25lcyBncmFuZGVzLCBhZ3JhZGVjZXLDrWFtb3MgbGFzIGZ1ZW50ZXMgZGUgbGEgaW5mb3JtYWNpw7NuIHBhcmEgcXVlIHNlYSBtw6FzIGbDoWNpbCBwYXJhIG5vc290cm9zIHZlcmlmaWNhciBxdWUgbGEgaW5mb3JtYWNpw7NuIHF1ZSBwcm9wb3JjaW9uYXMgZXMgdsOhbGlkYSIKICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIkxhcyBpbcOhZ2VuZXMgZGViZW4gZXN0YXIgYWxvamFkYXMgbG9jYWxtZW50ZSBlbiBlbCByZXBvc2l0b3JpbyBiYWpvIGxhIGNhcnBldGEgIgogICAgICAgICAgKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiLi4vIGltYWdlcyAvIildKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgJ1R1IFBSIGRlYmUgZWplY3V0YXJzZSBhIHRyYXbDqXMgZGUgdW4gIm1hcmtkb3duIGxpbnQiIHkgZGViZSB0ZW5lciB0b2RvcyBsb3MgcHJvYmxlbWFzIHNvbHVjaW9uYWRvcy4nCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiRW4gZ2VuZXJhbCwgaW50ZW50YSBhIGV2aXRhciBlbCB1c28gZGUgaGVycmFtaWVudGFzIHF1ZSBubyBzZWFuIGRlIEFjaWRhbnRoZXJhIGN1YW5kbyBzZWEgcG9zaWJsZS4gR2VuZXJhbG1lbnRlIHF1ZXJlbW9zIGV2aXRhciBlbCB1c28gZGUgaGVycmFtaWVudGFzIGRlIHRlcmNlcm9zLCBhdW5xdWUgc2kgZXMgaW1wb3NpYmxlIGRlIGxvIGNvbnRyYXJpbywgcHVlZGVzIHZpbmN1bGFybGEuXG4iCiAgICAgICAgICApLAogICAgICAgICAgX2MoInVsIiwgWwogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJIZXJyYW1pZW50YXMgZXhwbMOtY2l0YW1lbnRlIHByb2hpYmlkYXM6XG4iKSwKICAgICAgICAgICAgICBfYygidWwiLCBbCiAgICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigiVW5pQmVhc3QsIE11bHRpQmVhc3QgeSBLZXh0QmVhc3RcbiIpLAogICAgICAgICAgICAgICAgICBfYygidWwiLCBbCiAgICAgICAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJTZSBwdWVkZSBlbmNvbnRyYXIgbcOhcyBpbmZvcm1hY2nDs24gYXF1w606ICIpLAogICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiaHR0cHM6Ly9naXRodWIuY29tL2tocm9ub2tlcm5lbC9Ub255bWN4ODYtc3RhbmNlIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgW192bS5fdigiVG9ueW1hY3g4Ni1zdGFuY2UiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoIlRyYW5zTWFjXG4iKSwKICAgICAgICAgICAgICAgICAgX2MoInVsIiwgWwogICAgICAgICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgIkNvbm9jaWRvIHBvciBjcmVhciBVU0JzIHF1ZSBubyBmdW5jaW9uYW4gY29ycmVjdGFtZW50ZSIKICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KCJJbnN0YWxhZG9yZXMgZGUgTmlyZXNoXG4iKSwKICAgICAgICAgICAgICAgICAgX2MoInVsIiwgWwogICAgICAgICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiUXVpc2nDqXJhbW9zIGV2aXRhciBsYSBwaXJhdGVyw61hIGNvbiBsYXMgZ3XDrWFzIikKICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJjb21vLWNvbnRyaWJ1aXIiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2NvbW8tY29udHJpYnVpciIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgQ8OzbW8gQ29udHJpYnVpciIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkxhIG1lam9yIG1hbmVyYSBkZSBwcm9iYXIgdHVzIGNvbW1pdHMgeSBhc2VndXJhcnRlIGRlIHF1ZSBzdSBmb3JtYXRvIGVzIGNvcnJlY3RvIGVzIGRlc2NhcmdhciBOb2RlLmpzIHkgbHVlZ28gY29ycmVyICIKICAgICAgICApLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigibnBtIGluc3RhbGwiKV0pLAogICAgICAgIF92bS5fdigiIHBhcmEgaW5zdGFsYXIgbGFzIGRlcGVuZGVuY2lhcy4gQ3VhbmRvIGNvcnJlcyAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIm5wbSBydW4gZGV2IildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiLCBjb25maWd1cmFyw6EgdW4gd2Vic2VydmVyIGxvY2FsIGFsIHF1ZSBwdWVkZXMgY29uZWN0YXIgcGFyYSB2ZXIgbG9zIGNhbWJpb3MgcXVlIGhhcyBoZWNoby4gIgogICAgICAgICksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJucG0gdGVzdCIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiB0YW1iacOpbiBhcnJvamFyw6EgY3VhbHF1aWVyIGVycm9yIHNvYnJlIGVsIGZvcm1hdG8geSBsYSBjb3JyZWNjacOzbiBvcnRvZ3LDoWZpY2EuIFNpIHF1aWVyYXMgdXNhciAiCiAgICAgICAgKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIm1hcmtkb3dubGludCIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBwYXJhIGludGVudGFyIGEgYXJyZWdsYXIgYXV0b23DoXRpY2FtZW50ZSBhcnJlZ2xhciBlbCBsaW50aW5nLCBjb3JyZSAiCiAgICAgICAgKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIm5wbSBydW4gZml4LWxpbnQiKV0pLAogICAgICAgIF92bS5fdigiLiIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX3ZtLl92KCJJbnN0cnVjY2lvbmVzIHBhc28tYS1wYXNvOiIpXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOgogICAgICAgICAgICAgICAgICAiaHR0cHM6Ly9naXRodWIuY29tL2RvcnRhbmlhL09wZW5Db3JlLUluc3RhbGwtR3VpZGUvZm9yay8iLAogICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJGb3JrZWFyIGVzdGUgcmVwbyIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgICAxCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJJbnN0YWxhciBsYXMgaGVycmFtaW5ldGFzIHJlcXVlcmlkYXM6XG4iKSwKICAgICAgICAgIF9jKCJ1bCIsIFsKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL25vZGVqcy5vcmcvIiwKICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbX3ZtLl92KCJOb2RlLmpzIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJIYWNlciB0dXMgY2FtYmlvcy4iKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiQ29uc3RydWlyIGVsIHNpdGlvOlxuIiksCiAgICAgICAgICBfYygidWwiLCBbCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIm5wbSBpbnN0YWxsIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIiAoUGFyYSBpbnN0YWxhciB0b2RvcyBsb3MgcGx1Z2lucyByZXF1ZXJpZG9zKSIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigibnBtIHJ1biBkZXYiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiIChUZW5lciB1bmEgdmlzdGEgcHJldmlhIGRlbCBzaXRpbylcbiIpLAogICAgICAgICAgICAgIF9jKCJ1bCIsIFsKICAgICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KCJTZSBwdWVkZSBlbmNvbnRyYXIgZW4gIiksCiAgICAgICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiaHR0cDovL2xvY2FsaG9zdDo4MDgwIildKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIlJldmlzYXIgbGludGluZyB5IGVycm9yZXMgb3J0b2dyw6FmaWNvczpcbiIpLAogICAgICAgICAgX2MoInVsIiwgWwogICAgICAgICAgICBfYygibGkiLCBbX2MoImNvZGUiLCBbX3ZtLl92KCJucG0gdGVzdCIpXSldKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIm5wbSBydW4gbGludCIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgeSAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIm5wbSBydW4gc3BlbGxjaGVjayIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgKHBhcmEgY29ycmVybG9zIGluZGl2aWR1YWxtZW50ZSkiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIm5wbSBydW4gZml4LWxpbnQiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiIChQYXJhIHNvbHVjaW9uYXIgY3VhbHF1aWVyIHByb2JsZW1hIHBvdGVuY2lhbCkiKQogICAgICAgICAgICBdKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJ0aXBzIiB9IH0sIFsKICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiN0aXBzIiB9IH0sIFsKICAgICAgICAgIF92bS5fdigiIyIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgVGlwcyIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX3ZtLl92KCJBbGd1bmFzIGhlcnJhbWllbnRhcyBxdWUgZmFjaWxpdGFuIGxhIGNvbnRyaWJ1Y2nDs246IildKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJbVHlwb3JhXSAoaHR0cHM6Ly90eXBvcmEuaW8pIHBhcmEgcmVuZGVyaXphZG8gZGUgcmViYWphcyBlbiB0aWVtcG8gcmVhbC4iCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiW1RleHRNYXRlXSAoaHR0cHM6Ly9tYWNyb21hdGVzLmNvbSkgcGFyYSBlbmNvbnRyYXIvcmVlbXBsYXphciBlbiBtYXNhIGRlIGZvcm1hIGbDoWNpbC4iCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9kZXNrdG9wLmdpdGh1Yi5jb20iLAogICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJHaXRodWIgZGUgZXNjcml0b3JpbyIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KCIgcGFyYSB1bmEgR1VJIG3DoXMgZsOhY2lsIGRlIHVzYXIuIikKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJjb250cmlidWlyLXZpYS10cmFkdWNjaW9uZXMiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2NvbnRyaWJ1aXItdmlhLXRyYWR1Y2Npb25lcyIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIENvbnRyaWJ1aXIgdmlhIFRyYWR1Y2Npb25lcyIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkF1bnF1ZSBsYXMgZ3XDrWFzIGRlIERvcnRhbmlhIGVzdMOhbiBiYXNhZGFzIHByaW5jaXBhbG1lbnRlIGVuIGluZ2zDqXMsIHNhYmVtb3MgcXVlIGhheSBtdWNob3Mgb3Ryb3MgaWRpb21hcyBlbiBlbCBtdW5kbyB5IHF1ZSBubyB0b2RvcyBoYWJsYW4gaW5nbMOpcyBjb24gZmx1aWRlei4gU2kgcXVpZXJlcyBheXVkYXIgYSB0cmFkdWNpciBudWVzdHJhcyBndcOtYXMgYSBpZGlvbWFzIGRpZmVyZW50ZXMsIGVzdGFtb3MgbcOhcyBxdWUgZmVsaWNlcyBkZSBhcG95YXJ0ZS4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW192bS5fdigiQ29zYXMgcHJpbmNpcGFsZXMgYSB0ZW5lciBlbiBjdWVudGE6IildKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJMYXMgdHJhZHVjY2lvbmVzIGRlYmVuIHNlciB1biBmb3JrIGRlZGljYWRvIHF1ZSBubyBmb3JtYXLDoSBwYXJ0ZSBvIHNlIGZ1c2lvbmFyw6EgY29uIGxhcyBndcOtYXMgZGUgRG9ydGFuaWEiCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiTG9zIGZvcmtzIGRlYmVuIGluZGljYXIgcXVlIHNvbiB0cmFkdWNjaW9uZXMgZGUgRG9ydGFuaWEgeSBxdWUgbm8gc29uIG9maWNpYWxlcyIKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygKICAgICAgICAgICJsaSIsCiAgICAgICAgICBbCiAgICAgICAgICAgIF92bS5fdigiTG9zIGZvcmtzIHRhbWJpw6luIGRlYmVuIGN1bXBsaXIgY29uIG51ZXN0cmEgIiksCiAgICAgICAgICAgIF9jKCJSb3V0ZXJMaW5rIiwgeyBhdHRyczogeyB0bzogIi9MSUNFTlNFLmh0bWwiIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiTGljZW5jaWEiKQogICAgICAgICAgICBdKQogICAgICAgICAgXSwKICAgICAgICAgIDEKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlNpIHNlIGN1bXBsZSBsbyBhbnRlcmlvciwgwqFlc3TDoXMgbGlicmUgYSBob3N0ZWFyIHR1IHRyYWR1Y2Npw7NuIHNpbiBwcm9ibGVtYSEgTG9zIHNpdGlvcyBkZSBEb3J0YW5pYSBzb24gY29uc3RydWlkb3MgY29uIFtWdWVQcmVzc10gKGh0dHBzOi8vdnVlcHJlc3MudnVlanMub3JnKSB1c2FuZG8gW1RyYXZpcy1DSV0gKGh0dHBzOi8vdHJhdmlzLWNpLm9yZykgeSBmaW5hbG1lbnRlIGFsb2phZG9zIGVuIFtHaXRodWIgUGFnZXNdIChodHRwczovL3BhZ2VzLmdpdGh1Yi5jb20pLCBhc8OtIHF1ZSBubyBoYXkgbmlnw7puIGNvc3RvIHBvciBhbG9qYXIgdHUgcHJvcGlhIHRyYWR1Y2Npw7NuLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlNpIHRpZW5lcyBhbGd1bmEgcHJlZ3VudGEgbyBpbnF1aWV0dWQgY29uIGxhcyB0cmFkdWNjaW9uZXMgbyBlbCBhbG9qYW1pZW50bywgbm8gZHVkZXMgZW4gY29tdW5pY2FydGUgY29uIG5vc290cm9zIG1lZGlhbnRlIG51ZXN0cm8gIgogICAgICAgICksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vZ2l0aHViLmNvbS9kb3J0YW5pYS9idWd0cmFja2VyIiwKICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCJCdWd0cmFja2VyIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIi4iKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW192bS5fdigiVHJhZHVjY2lvbmVzIGNvbm9jaWRhcyBhY3R1YWxtZW50ZToiKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vZ2l0aHViLmNvbS9JbnlleHRjaW9uRVMvT3BlbkNvcmUtSW5zdGFsbC1HdWlkZSIsCiAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIklueWV4dGNpb25FUyIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KCIoRXNwYcOxb2wpIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL21hY29zODYuZ2l0Ym9vay5pby9ndWlkYS1vcGVuY29yZS8iLAogICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJtYWNPUzg2IiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoIihJdGFsaWFubywgeWEgbm8gc2UgbWFudGllbmUpIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6CiAgICAgICAgICAgICAgICAgICJodHRwczovL3d3dy50ZWNobm9wYXQubmV0L3Nvc3lhbC9rb251L29wZW5jb3JlLWlsZS1tYWNvcy1rdXJ1bHVtLXJlaGJlcmkuOTYzNjYxLyIsCiAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIlRlY2hub3BhdCIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KCIoVHVyY28pIikKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJUZW4gZW4gY3VlbnRhIHF1ZSBlc3RhcyB0cmFkdWNjaW9uZXMgZXN0w6FuIHN1amV0YXMgYSBsYXMgcHJlZmVyZW5jaWFzIGRlIGxvcyBhdXRvcmVzLCBsb3MgY2FtYmlvcyBkZSB0cmFkdWNjacOzbiB5IGxvcyBlcnJvcmVzIGh1bWFub3MuIFBvciBmYXZvciwgdGVuIGVzdG8gZW4gY3VlbnRhIGFsIGxlZXIgZGFkbyBxdWUgeWEgbm8gc29uIGd1w61hcyBvZmljaWFsZXMgZGUgRG9ydGFuaWEuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygic3Ryb25nIiwgWwogICAgICAgICAgX3ZtLl92KCJDcsOpZGl0b3MgZGUgbGEgdHJhZHVjY2nDs246ICIpLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9kb3J0YW5pYS5naXRodWIuaW8vT3BlbkNvcmUtSW5zdGFsbC1HdWlkZS8iLAogICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJHdcOtYSBvcmlnaW5hbCIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgICAxCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSkKICAgIF0KICApCn0KdmFyIHN0YXRpY1JlbmRlckZucyA9IFtdCnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZQoKZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfQ=="}]}