{"remainingRequest":"/Users/banana/Desktop/GIT/OpenCore-Install-Guide/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/banana/Desktop/GIT/OpenCore-Install-Guide/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/banana/Desktop/GIT/OpenCore-Install-Guide/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/banana/Desktop/GIT/OpenCore-Install-Guide/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/banana/Desktop/GIT/OpenCore-Install-Guide/extras/big-sur/README.md?vue&type=template&id=630ebc15&","dependencies":[{"path":"/Users/banana/Desktop/GIT/OpenCore-Install-Guide/extras/big-sur/README.md","mtime":1603146013340},{"path":"/Users/banana/Desktop/GIT/OpenCore-Install-Guide/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/banana/Desktop/GIT/OpenCore-Install-Guide/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/banana/Desktop/GIT/OpenCore-Install-Guide/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/banana/Desktop/GIT/OpenCore-Install-Guide/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/banana/Desktop/GIT/OpenCore-Install-Guide/node_modules/@vuepress/markdown-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}