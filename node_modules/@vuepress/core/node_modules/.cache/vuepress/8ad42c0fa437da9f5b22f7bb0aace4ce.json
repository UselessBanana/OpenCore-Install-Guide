{"remainingRequest":"/Users/banana/Desktop/GIT/OpenCore-Install-Guide/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/banana/Desktop/GIT/OpenCore-Install-Guide/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/banana/Desktop/GIT/OpenCore-Install-Guide/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/banana/Desktop/GIT/OpenCore-Install-Guide/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/banana/Desktop/GIT/OpenCore-Install-Guide/config.plist/coffee-lake.md?vue&type=template&id=06068dec&","dependencies":[{"path":"/Users/banana/Desktop/GIT/OpenCore-Install-Guide/config.plist/coffee-lake.md","mtime":1603146013270},{"path":"/Users/banana/Desktop/GIT/OpenCore-Install-Guide/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/banana/Desktop/GIT/OpenCore-Install-Guide/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/banana/Desktop/GIT/OpenCore-Install-Guide/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/banana/Desktop/GIT/OpenCore-Install-Guide/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/banana/Desktop/GIT/OpenCore-Install-Guide/node_modules/@vuepress/markdown-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "ContentSlotsDistributor",
    { attrs: { "slot-key": _vm.$parent.slotKey } },
    [
      _c("h1", { attrs: { id: "coffee-lake-de-escritorio" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#coffee-lake-de-escritorio" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" Coffee lake de escritorio")
      ]),
      _vm._v(" "),
      _c("table", [
        _c("thead", [
          _c("tr", [
            _c("th", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Soporte")
            ]),
            _vm._v(" "),
            _c("th", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Versión")
            ])
          ])
        ]),
        _vm._v(" "),
        _c("tbody", [
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Versión de OpenCore Soportada")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("0.6.2")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Soporte inicial de macOS")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("macOS 10.13, High Sierra")
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "punto-de-partida" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#punto-de-partida" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" Punto de partida")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Hacer un config.plist puede parecer difícil, pero en realidad no lo es. Sólo toma tiempo, pero esta guía te dirá cómo configurar todo, no dejará espacios sin cubrir. Esto también significa que si tienes problemas, asegúrate de que todos los espacios de tu config estén correctos, respaldándote con esta guía. Principales cosas a tener en cuenta con OpenCore:"
        )
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c("p", [
            _c("strong", [_vm._v("Todas las propiedades deben ser definidas")]),
            _vm._v(", no hay opciones predeterminadas para OpenCore, así que "),
            _c("strong", [
              _vm._v(
                "no elimines secciones a menos que se te indique específicamente"
              )
            ]),
            _vm._v(". Si la guía no menciona la opción, déjala como está.")
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("p", [
            _c("strong", [
              _vm._v("El sample.plist no puede ser utilizado como está")
            ]),
            _vm._v(", debes configurarlo para tu sistema")
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("p", [
            _c("strong", [_vm._v("NO USES CONFIGURADORES")]),
            _vm._v(
              ", éstos raramente respetan la configuración de OpenCore y algunos como los de Mackie agregarán propiedades de Clover y generarán plists corruptas!\nAhora con todo esto, haremos un pequeño recordatorio de todo lo que necesitamos:"
            )
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("p", [
            _c(
              "a",
              {
                attrs: {
                  href: "https://github.com/corpnewt/ProperTree",
                  target: "_blank",
                  rel: "noopener noreferrer"
                }
              },
              [_vm._v("ProperTree"), _c("OutboundLink")],
              1
            )
          ]),
          _vm._v(" "),
          _c("ul", [_c("li", [_vm._v("Editor de plists universal")])])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("p", [
            _c(
              "a",
              {
                attrs: {
                  href: "https://github.com/corpnewt/GenSMBIOS",
                  target: "_blank",
                  rel: "noopener noreferrer"
                }
              },
              [_vm._v("GenSMBIOS"), _c("OutboundLink")],
              1
            )
          ]),
          _vm._v(" "),
          _c("ul", [_c("li", [_vm._v("Para generar datos de SMBIOS")])])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("p", [
            _c(
              "a",
              {
                attrs: {
                  href: "https://github.com/acidanthera/OpenCorePkg/releases",
                  target: "_blank",
                  rel: "noopener noreferrer"
                }
              },
              [_vm._v("Sample/config.plist"), _c("OutboundLink")],
              1
            )
          ]),
          _vm._v(" "),
          _c("ul", [
            _c(
              "li",
              [
                _vm._v("Dirígete a la sección anterior sobre cómo obtenerla: "),
                _c("RouterLink", { attrs: { to: "/config.plist/" } }, [
                  _vm._v("Setup de tu config.plist")
                ])
              ],
              1
            )
          ])
        ])
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [
          _vm._v(
            "Lee esta guía más de una vez antes de configurar OpenCore y asegúrate de tenerlo configurado correctamente. Ten en cuenta que las imágenes no siempre serán las más actualizadas, así que lee el texto debajo de ellas, si no se menciona nada, déjalo como predeterminado."
          )
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "acpi" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#acpi" } }, [
          _vm._v("#")
        ]),
        _vm._v(" ACPI")
      ]),
      _vm._v(" "),
      _c("p", [
        _c("img", {
          attrs: {
            src: require("../images/config/config-universal/aptio-v-acpi.png"),
            alt: "ACPI"
          }
        })
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "add" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#add" } }, [
          _vm._v("#")
        ]),
        _vm._v(" Add")
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "custom-block tip" }, [
        _c("p", { staticClass: "custom-block-title" }, [_vm._v("Info")]),
        _vm._v(" "),
        _c(
          "p",
          [
            _vm._v(
              "Aquí es donde agregarás los SSDTs para su sistema, estos son muy importantes para "
            ),
            _c("strong", [_vm._v("arrancar macOS")]),
            _vm._v(" y tienen muchos usos como "),
            _c(
              "a",
              {
                attrs: {
                  href: "https://dortania.github.io/OpenCore-Post-Install/usb/",
                  target: "_blank",
                  rel: "noopener noreferrer"
                }
              },
              [_vm._v("hacer USB mapping"), _c("OutboundLink")],
              1
            ),
            _vm._v(", "),
            _c("RouterLink", { attrs: { to: "/extras/spoof.html" } }, [
              _vm._v("deshabilitar GPUs no compatibles")
            ]),
            _vm._v(" y demás. Y con nuestro sistema, "),
            _c("strong", [_vm._v("incluso es necesario  para bootear")]),
            _vm._v(". Guía sobre cómo encontrarlos aquí: "),
            _c(
              "a",
              {
                attrs: {
                  href:
                    "https://inyextciones.github.io/Getting-Started-With-ACPI/",
                  target: "_blank",
                  rel: "noopener noreferrer"
                }
              },
              [
                _c("strong", [_vm._v("Comenzando con ACPI")]),
                _c("OutboundLink")
              ],
              1
            )
          ],
          1
        ),
        _vm._v(" "),
        _c("p", [
          _vm._v(
            "En nuestro caso necesitaremos un par de SSDTs para recuperar la funcionalidad que Clover proporcionó"
          )
        ]),
        _vm._v(" "),
        _c("table", [
          _c("thead", [
            _c("tr", [
              _c("th", { staticStyle: { "text-align": "left" } }, [
                _vm._v("SSDTs requeridos")
              ]),
              _vm._v(" "),
              _c("th", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Descripción")
              ])
            ])
          ]),
          _vm._v(" "),
          _c("tbody", [
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _c("strong", [
                  _c(
                    "a",
                    {
                      attrs: {
                        href:
                          "https://dortania.github.io/Getting-Started-With-ACPI/",
                        target: "_blank",
                        rel: "noopener noreferrer"
                      }
                    },
                    [_vm._v("SSDT-PLUG"), _c("OutboundLink")],
                    1
                  )
                ])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v(
                  "Permite administración de la energía de la CPU nativa en Haswell y posterior. Dirígete a "
                ),
                _c(
                  "a",
                  {
                    attrs: {
                      href:
                        "https://dortania.github.io/Getting-Started-With-ACPI/",
                      target: "_blank",
                      rel: "noopener noreferrer"
                    }
                  },
                  [_vm._v("Comenzando con ACPI"), _c("OutboundLink")],
                  1
                ),
                _vm._v(" para más información.")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _c("strong", [
                  _c(
                    "a",
                    {
                      attrs: {
                        href:
                          "https://dortania.github.io/Getting-Started-With-ACPI/",
                        target: "_blank",
                        rel: "noopener noreferrer"
                      }
                    },
                    [_vm._v("SSDT-EC-USBX"), _c("OutboundLink")],
                    1
                  )
                ])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v(
                  "Arregla el controlador integrado (Embeeded Controller o EC en inglés) y la energía de los USBs. Dirígete a "
                ),
                _c(
                  "a",
                  {
                    attrs: {
                      href:
                        "https://dortania.github.io/Getting-Started-With-ACPI/",
                      target: "_blank",
                      rel: "noopener noreferrer"
                    }
                  },
                  [_vm._v("Comenzando con ACPI"), _c("OutboundLink")],
                  1
                ),
                _vm._v(" para más información.")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _c("strong", [
                  _c(
                    "a",
                    {
                      attrs: {
                        href:
                          "https://dortania.github.io/Getting-Started-With-ACPI/",
                        target: "_blank",
                        rel: "noopener noreferrer"
                      }
                    },
                    [_vm._v("SSDT-AWAC"), _c("OutboundLink")],
                    1
                  )
                ])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Este es el "),
                _c(
                  "a",
                  {
                    attrs: {
                      href:
                        "https://www.hackintosh-forum.de/forum/thread/39846-asrock-z390-taichi-ultimate/?pageNo=2",
                      target: "_blank",
                      rel: "noopener noreferrer"
                    }
                  },
                  [_vm._v("parche de RTC de la serie 300"), _c("OutboundLink")],
                  1
                ),
                _vm._v(
                  ", requerido para la mayoría de las placas madre B360, B365, H310, H370, Z390 y algunas Z370 que previenen que los sistemas arranquen macOS. La alternativa es"
                ),
                _c(
                  "a",
                  {
                    attrs: {
                      href:
                        "https://dortania.github.io/Getting-Started-With-ACPI/",
                      target: "_blank",
                      rel: "noopener noreferrer"
                    }
                  },
                  [_vm._v("SSDT-RTC0"), _c("OutboundLink")],
                  1
                ),
                _vm._v(
                  " para cuando el SSDT AWAC es incompatible debido a la falta del reloj RTC Legacy, para saber si lo necesitas y cuál debes usar por favor dirígete a la página de "
                ),
                _c(
                  "a",
                  {
                    attrs: {
                      href:
                        "https://dortania.github.io/Getting-Started-With-ACPI/",
                      target: "_blank",
                      rel: "noopener noreferrer"
                    }
                  },
                  [_vm._v("Comenzando con ACPI"), _c("OutboundLink")],
                  1
                ),
                _vm._v(".")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _c("strong", [
                  _c(
                    "a",
                    {
                      attrs: {
                        href:
                          "https://dortania.github.io/Getting-Started-With-ACPI/",
                        target: "_blank",
                        rel: "noopener noreferrer"
                      }
                    },
                    [_vm._v("SSDT-PMC"), _c("OutboundLink")],
                    1
                  )
                ])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v(
                  "Las verdaderas placas base de la serie 300 (no Z370) no declaran el chip FW como MMIO en ACPI, por lo que el XNU ignora la región MMIO declarada por el mapa de memoria UEFI. Este SSDT trae de vuelta el soporte de NVRAM. Consulta "
                ),
                _c(
                  "a",
                  {
                    attrs: {
                      href:
                        "https://dortania.github.io/Getting-Started-With-ACPI/",
                      target: "_blank",
                      rel: "noopener noreferrer"
                    }
                  },
                  [_vm._v("Comenzando con ACPI"), _c("OutboundLink")],
                  1
                ),
                _vm._v(" para obtener más detalles.")
              ])
            ])
          ])
        ]),
        _vm._v(" "),
        _c("p", [
          _vm._v("Ten en cuenta que "),
          _c("strong", [_vm._v("no debes")]),
          _vm._v(" agregar tu "),
          _c("code", [_vm._v("DSDT.aml")]),
          _vm._v(
            " generado aquí, ya está en tu firmware. Entonces, si está presente, elimina la entrada correspondiente en tu "
          ),
          _c("code", [_vm._v("config.plist")]),
          _vm._v(" y en EFI/OC/ACPI.")
        ]),
        _vm._v(" "),
        _c("p", [
          _vm._v(
            "Aquellos que deseen una explicación más profunda de cómo hacer un dump de su DSDT, y de cómo hacer estos SSDTs y compilarlos, consulten "
          ),
          _c(
            "a",
            {
              attrs: {
                href: "https://dortania.github.io/Getting-Started-With-ACPI/",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("strong", [_vm._v("Comenzando con ACPI")]), _c("OutboundLink")],
            1
          ),
          _vm._v(". Los SSDTs compilados tienen una extensión "),
          _c("strong", [_vm._v(".aml")]),
          _vm._v(" (compilados) e irán a la carpeta "),
          _c("code", [_vm._v("EFI/OC/ACPI")]),
          _vm._v(" y "),
          _c("strong", [_vm._v("debe")]),
          _vm._v(" especificarse en tu configuración en "),
          _c("code", [_vm._v("ACPI -> Add")]),
          _vm._v(" también.")
        ])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "delete" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#delete" } }, [
          _vm._v("#")
        ]),
        _vm._v(" Delete")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Esto bloquea la carga de ciertas tablas ACPI, en nuestro caso podemos ignorar esto."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "patch" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#patch" } }, [
          _vm._v("#")
        ]),
        _vm._v(" Patch")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Esta sección nos permite modificar dinámicamente partes del ACPI (DSDT, SSDTs, etc.) a través de OpenCore. En nuestro caso, los parches son manejados por nuestros SSDTs. Esta es una solución mucho más limpia, ya que nos permitirá iniciar Windows y otros sistemas operativos con OpenCore"
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "quirks" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#quirks" } }, [
          _vm._v("#")
        ]),
        _vm._v(" Quirks")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Configuración relacionada con ACPI: deja todo aquí como predeterminado, ya que no tenemos uso para estas quirks."
        )
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "booter" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#booter" } }, [
          _vm._v("#")
        ]),
        _vm._v(" Booter")
      ]),
      _vm._v(" "),
      _c("p", [
        _c("img", {
          attrs: {
            src: require("../images/config/config-universal/aptio-iv-booter.png"),
            alt: "Booter"
          }
        })
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Esta sección está dedicada a los quirks relacionados con el parche del boot.efi con OpenRuntime, el reemplazo de AptioMemoryFix.efi"
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "mmiowhitelist" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#mmiowhitelist" } },
          [_vm._v("#")]
        ),
        _vm._v(" MmioWhitelist")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Esta sección permite pasar dispositivos a macOS que generalmente se ignoran, en nuestro caso podemos ignorar esto."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "quirks-2" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#quirks-2" } },
          [_vm._v("#")]
        ),
        _vm._v(" Quirks")
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "custom-block tip" }, [
        _c("p", { staticClass: "custom-block-title" }, [_vm._v("Info")]),
        _vm._v(" "),
        _c("p", [
          _vm._v(
            "Configuraciones relacionadas a el parcheo de boot.efi y arreglos en el firmware. En nuestro caso, cambiaremos lo siguiente"
          )
        ]),
        _vm._v(" "),
        _c("table", [
          _c("thead", [
            _c("tr", [
              _c("th", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Quirk")
              ]),
              _vm._v(" "),
              _c("th", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Enabled")
              ]),
              _vm._v(" "),
              _c("th", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Comment")
              ])
            ])
          ]),
          _vm._v(" "),
          _c("tbody", [
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("DevirtualiseMmio")
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("YES")
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } })
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("EnableWriteUnprotector")
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("NO")
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } })
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("ProtectUefiServices")
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("YES")
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Necesario en sistemas con Z390")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("RebuildAppleMemoryMap")
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("YES")
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } })
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("SyncRuntimePermissions")
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("YES")
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } })
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("details", { staticClass: "custom-block details" }, [
        _c("summary", [_vm._v("Información más detallada")]),
        _vm._v(" "),
        _c("ul", [
          _c("li", [
            _c("strong", [_vm._v("AvoidRuntimeDefrag")]),
            _vm._v(": YES\n"),
            _c("ul", [
              _c("li", [
                _vm._v(
                  "Corrige runtime services de UEFI como fecha, hora, NVRAM, control de energía, etc."
                )
              ])
            ])
          ]),
          _vm._v(" "),
          _c("li", [
            _c("strong", [_vm._v("DevirtualiseMmio")]),
            _vm._v(": YES\n"),
            _c("ul", [
              _c("li", [
                _vm._v(
                  "Reduce la huella de memoria robada, amplía las opciones para los valores "
                ),
                _c("code", [_vm._v("slide = N")]),
                _vm._v(
                  " y es muy útil para solucionar problemas de asignación de memoria en Z390. Requiere de "
                ),
                _c("code", [_vm._v("ProtectUefiServices")]),
                _vm._v(" en IceLake y Z390 Coffee Lake")
              ])
            ])
          ]),
          _vm._v(" "),
          _c("li", [
            _c("strong", [_vm._v("EnableWriteUnprotector")]),
            _vm._v(": NO\n"),
            _c("ul", [
              _c("li", [
                _vm._v(
                  "Este quirk y RebuildAppleMemoryMap pueden entrar en conflicto, recomendamos habilitar este último en plataformas más nuevas y deshabilitar esta entrada."
                )
              ]),
              _vm._v(" "),
              _c(
                "li",
                [
                  _vm._v(
                    "Sin embargo, debido a problemas de distintos fabricantes que no usan las versiones más nuevas de EDKII podrías encontrar que el combo de arriba cause que tengas fallas en tempranas en el arranque. Esto es debido a la falta de "
                  ),
                  _c("code", [_vm._v("MEMORY_ATTRIBUTE_TABLE")]),
                  _vm._v(
                    ", por lo que recomendamos que deshabilites RebuildAppleMemoryMap y habilites EnableWriteUnprotector. Más información sobre esto será cubierta en la "
                  ),
                  _c(
                    "RouterLink",
                    {
                      attrs: {
                        to:
                          "/troubleshooting/troubleshooting.html#trancado-en-eb-log-exitbs-start"
                      }
                    },
                    [_vm._v("sección de solución de problemas")]
                  )
                ],
                1
              )
            ])
          ]),
          _vm._v(" "),
          _c("li", [
            _c("strong", [_vm._v("ProtectUefiServices")]),
            _vm._v(": NO\n"),
            _c("ul", [
              _c("li", [
                _vm._v(
                  "Protege los servicios UEFI de ser sobreescritos por el firmware, esto es principalmente relevante para VMs, Icelake y sistemas Z390."
                )
              ]),
              _vm._v(" "),
              _c("li", [
                _vm._v("Si tienes Z390, "),
                _c("strong", [_vm._v("habilita este quirk")])
              ])
            ])
          ]),
          _vm._v(" "),
          _c("li", [
            _c("strong", [_vm._v("RebuildAppleMemoryMap")]),
            _vm._v(": YES\n"),
            _c("ul", [
              _c("li", [
                _vm._v(
                  "Genera un mapa de memoria compatible con macOS, puede romperse en algunos firmwares de laptops de OEMs, así que si recives fallas en el arranque temprando deshabilita esto."
                )
              ])
            ])
          ]),
          _vm._v(" "),
          _c("li", [
            _c("strong", [_vm._v("SetupVirtualMap")]),
            _vm._v(": YES\n"),
            _c("ul", [
              _c("li", [
                _vm._v("Corrige las llamadas de "),
                _c("code", [_vm._v("SetVirtualAddresses")]),
                _vm._v(" a "),
                _c("code", [_vm._v("virtual addresses")])
              ])
            ])
          ]),
          _vm._v(" "),
          _c("li", [
            _c("strong", [_vm._v("SyncRuntimePermissions")]),
            _vm._v(": YES\n"),
            _c("ul", [
              _c("li", [
                _vm._v(
                  "Soluciona la alineación con las tablas MAT y es necesario para iniciar Windows y Linux estas, también recomendado para macOS. Principalmente relevante para Skylake y posterior"
                )
              ])
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "deviceproperties" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#deviceproperties" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" DeviceProperties")
      ]),
      _vm._v(" "),
      _c("p", [
        _c("img", {
          attrs: {
            src: require("../images/config/config.plist/coffeelake/DeviceProperties.png"),
            alt: "DeviceProperties"
          }
        })
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "add-2" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#add-2" } }, [
          _vm._v("#")
        ]),
        _vm._v(" Add")
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("Configura las device properties desde un mapa.")]),
      _vm._v(" "),
      _c("div", { staticClass: "custom-block tip" }, [
        _c("p", { staticClass: "custom-block-title" }, [
          _vm._v("PciRoot(0x0)/Pci(0x2,0x0)")
        ]),
        _vm._v(" "),
        _c("p", [
          _vm._v("Esta sección se configura a través de la "),
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://github.com/acidanthera/WhateverGreen/blob/master/Manual/FAQ.IntelHD.en.md",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("Guía de parcheo de Framebuffers"), _c("OutboundLink")],
            1
          ),
          _vm._v(
            " y se utiliza para establecer propiedades importantes de tu iGPU. "
          ),
          _c("strong", [
            _vm._v("Si tienes una CPU de la serie "),
            _c("code", [_vm._v("-F")]),
            _vm._v(" puedes ignorar esto, ya que no tienes un iGPU")
          ])
        ]),
        _vm._v(" "),
        _c("p", [
          _c("code", [_vm._v("AAPL,ig-platform-id")]),
          _vm._v(
            " es lo que macOS usa para determinar cómo los drivers de tu iGPU interactúan con tu sistema, y los dos valores que se eligen son los siguientes:"
          )
        ]),
        _vm._v(" "),
        _c("table", [
          _c("thead", [
            _c("tr", [
              _c("th", { staticStyle: { "text-align": "left" } }, [
                _vm._v("AAPL,ig-platform-id")
              ]),
              _vm._v(" "),
              _c("th", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Comentario")
              ])
            ])
          ]),
          _vm._v(" "),
          _c("tbody", [
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("07009B3E")
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v(
                  "Utilizado cuando el iGPU es utilizado para manejar un monitor"
                )
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("0300913E")
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v(
                  "Usado cuando el iGPU de escritorio es utilizado para tareas computacionales y no maneja un monitor"
                )
              ])
            ])
          ])
        ]),
        _vm._v(" "),
        _c("p", [
          _c("strong", [_vm._v("Nota")]),
          _vm._v(
            ": Con macOS 10.15.5, parece que hay problemas de pantalla negra con las personas que usan "
          ),
          _c("code", [_vm._v("07009B3E")]),
          _vm._v(", si tienes problemas similares intenta cambiar a "),
          _c("code", [_vm._v("00009B3E")])
        ]),
        _vm._v(" "),
        _c("p", [
          _vm._v("También agregamos 2 propiedades más, "),
          _c("code", [_vm._v("framebuffer-patch-enable")]),
          _vm._v(" y "),
          _c("code", [_vm._v("framebuffer-stolenmem")]),
          _vm._v(
            '. El primero habilita la aplicación de parches a través de WhateverGreen.kext, y el segundo establece la "stolenmem" mínima a 19 MB. Esto generalmente no es necesario, ya que se puede configurar en BIOS (se recomiendan 64 MB) pero se requiere cuando no puedes hacer esto.'
          )
        ]),
        _vm._v(" "),
        _c("ul", [
          _c("li", [
            _c("strong", [_vm._v("Nota")]),
            _vm._v(
              ': Los framebuffers "headless" (donde dGPU maneja la pantalla) no necesitan '
            ),
            _c("code", [_vm._v("framebuffer-patch-enable")]),
            _vm._v(" y "),
            _c("code", [_vm._v("framebuffer-stolenmem")])
          ])
        ]),
        _vm._v(" "),
        _c(
          "p",
          [
            _vm._v(
              "Para los usuarios con una pantalla negra luego de verbose en placas madre B360, B365, H310, H370 y Z390, por favor vayan a la página de "
            ),
            _c(
              "RouterLink",
              { attrs: { to: "/extras/gpu-patches.html#iGPU-BusID-Patching" } },
              [_vm._v("parcheo del BusID del iGPU")]
            )
          ],
          1
        ),
        _vm._v(" "),
        _c("table", [
          _c("thead", [
            _c("tr", [
              _c("th", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Key")
              ]),
              _vm._v(" "),
              _c("th", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Type")
              ]),
              _vm._v(" "),
              _c("th", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Value")
              ])
            ])
          ]),
          _vm._v(" "),
          _c("tbody", [
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("AAPL,ig-platform-id")
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Data")
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("07009B3E")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("framebuffer-patch-enable")
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Data")
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("01000000")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("framebuffer-stolenmem")
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Data")
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("00003001")
              ])
            ])
          ])
        ]),
        _vm._v(" "),
        _c("p", [
          _vm._v(
            "(Este es un ejemplo para un HD 630 de escritorio sin una GPU dedicada y sin opciones en la BIOS para la memoria del iGPU)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "custom-block tip" }, [
        _c("p", { staticClass: "custom-block-title" }, [
          _vm._v("PciRoot(0x0)/Pci(0x1b,0x0)")
        ]),
        _vm._v(" "),
        _c("p", [_c("code", [_vm._v("layout-id")])]),
        _vm._v(" "),
        _c("ul", [
          _c("li", [
            _vm._v(
              "Aplica la inyección de audio AppleALC. Deberás hacer tu propia investigación sobre qué códec tiene tu placa base y combinarla con el layout de AppleALC. "
            ),
            _c(
              "a",
              {
                attrs: {
                  href:
                    "https://github.com/acidanthera/AppleALC/wiki/Supported-codecs",
                  target: "_blank",
                  rel: "noopener noreferrer"
                }
              },
              [_vm._v("Códecs compatibles con AppleALC"), _c("OutboundLink")],
              1
            ),
            _vm._v(".")
          ]),
          _vm._v(" "),
          _c("li", [
            _vm._v(
              "Puedes eliminar esta propiedad directamente ya que no la utilizaremos en este momento"
            )
          ])
        ]),
        _vm._v(" "),
        _c("p", [
          _vm._v("En nuestro caso, utilizaremos el boot-arg "),
          _c("code", [_vm._v("alcid=xxx")]),
          _vm._v(" en su lugar para lograrlo. "),
          _c("code", [_vm._v("alcid")]),
          _vm._v(
            " anulará todas las demás layouts ID  presentes. Encontrarás mayor información en la "
          ),
          _c(
            "a",
            {
              attrs: {
                href: "https://dortania.github.io/OpenCore-Post-Install/",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("Página de post-instalación"), _c("OutboundLink")],
            1
          )
        ])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "delete-2" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#delete-2" } },
          [_vm._v("#")]
        ),
        _vm._v(" Delete")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Elimina las propiedades del dispositivo del mapa. En nuestro caso podemos ignorar esto"
        )
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "kernel" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#kernel" } }, [
          _vm._v("#")
        ]),
        _vm._v(" Kernel")
      ]),
      _vm._v(" "),
      _c("p", [
        _c("img", {
          attrs: {
            src: require("../images/config/config-universal/kernel.png"),
            alt: "Kernel"
          }
        })
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "add-3" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#add-3" } }, [
          _vm._v("#")
        ]),
        _vm._v(" Add")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Aquí es donde especificamos qué kexts cargar, en qué orden y para qué arquitectura es el kext en cuestión. Por defecto recomendamos que dejes lo que hace ProperTree, pero si tienes una CPU de 32 bits presta atención a la información de abajo:"
        )
      ]),
      _vm._v(" "),
      _c("details", { staticClass: "custom-block details" }, [
        _c("summary", [_vm._v("Información más detallada")]),
        _vm._v(" "),
        _c("p", [_vm._v("Lo principal que debes tener en cuenta es:")]),
        _vm._v(" "),
        _c("ul", [
          _c("li", [
            _vm._v("El orden de carga\n"),
            _c("ul", [
              _c("li", [
                _vm._v("Recuerda que cualquier plugin debe ser cargado "),
                _c("em", [_vm._v("luego")]),
                _vm._v(" del kext principal.")
              ]),
              _vm._v(" "),
              _c("li", [
                _vm._v("Esto significa que kexts como Lilu "),
                _c("strong", [_vm._v("deben")]),
                _vm._v(
                  " ir cargados antes de VirtualSMC, AppleALC, WhateverGreen, etc."
                )
              ])
            ])
          ])
        ]),
        _vm._v(" "),
        _c("p", [
          _vm._v("Un dato a tener en cuenta es que los usuarios de "),
          _c(
            "a",
            {
              attrs: {
                href: "https://github.com/corpnewt/ProperTree",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("ProperTree"), _c("OutboundLink")],
            1
          ),
          _vm._v(" pueden ejecutar "),
          _c("strong", [_vm._v("Cmd/Ctrl+Shift+R")]),
          _vm._v(
            " para agregar todos sus kexts en el orden correcto sin escribir manualmente cada kext."
          )
        ]),
        _vm._v(" "),
        _c("ul", [
          _c("li", [
            _c("strong", [_vm._v("Arch")]),
            _vm._v(" "),
            _c("ul", [
              _c("li", [
                _vm._v(
                  "Las arquitecturas soportadas por este kextArchitectures supported by this kext"
                )
              ]),
              _vm._v(" "),
              _c("li", [
                _vm._v("Los valores soportados actualmente son "),
                _c("code", [_vm._v("Any")]),
                _vm._v(", "),
                _c("code", [_vm._v("i386")]),
                _vm._v("(32-bits) y "),
                _c("code", [_vm._v("x86_64")]),
                _vm._v("(64-bits)")
              ])
            ])
          ]),
          _vm._v(" "),
          _c("li", [
            _c("strong", [_vm._v("BundlePath")]),
            _vm._v(" "),
            _c("ul", [
              _c("li", [_vm._v("Nombre del kext")]),
              _vm._v(" "),
              _c("li", [
                _vm._v("por ejemplo: "),
                _c("code", [_vm._v("Lilu.kext")])
              ])
            ])
          ]),
          _vm._v(" "),
          _c("li", [
            _c("strong", [_vm._v("Enabled")]),
            _vm._v(" "),
            _c("ul", [
              _c("li", [
                _vm._v(
                  "Se explica por sí solo, define si el kext está habilitado o no."
                )
              ])
            ])
          ]),
          _vm._v(" "),
          _c("li", [
            _c("strong", [_vm._v("ExecutablePath")]),
            _vm._v(" "),
            _c("ul", [
              _c("li", [
                _vm._v(
                  "La ruta al ejecutable real está oculta dentro del kext, puedes ver qué ruta tiene tu kext haciendo clic derecho y seleccionando "
                ),
                _c("code", [_vm._v("Mostrar contenido del paquete")]),
                _vm._v(". En general, será "),
                _c("code", [_vm._v("Contents/MacOS/Kext")]),
                _vm._v(
                  " pero algunos tienen kexts ocultos dentro de la carpeta "
                ),
                _c("code", [_vm._v("Plugin")]),
                _vm._v(
                  ". Ten en cuenta que los kexts con sólo plists no necesitan que esto sea completado."
                )
              ]),
              _vm._v(" "),
              _c("li", [
                _vm._v("ejemplo: "),
                _c("code", [_vm._v("Contents/MacOS/Lilu")])
              ])
            ])
          ]),
          _vm._v(" "),
          _c("li", [
            _c("strong", [_vm._v("MinKernel")]),
            _vm._v(" "),
            _c("ul", [
              _c("li", [
                _vm._v(
                  "La versión más baja del kernel en la que se inyectará tu kext, mira la tabla de abajo para ver valores posibles."
                )
              ]),
              _vm._v(" "),
              _c("li", [
                _vm._v("Ejemplo: "),
                _c("code", [_vm._v("12.00.00")]),
                _vm._v(" para OS X 10.8")
              ])
            ])
          ]),
          _vm._v(" "),
          _c("li", [
            _c("strong", [_vm._v("MaxKernel")]),
            _vm._v(" "),
            _c("ul", [
              _c("li", [
                _vm._v(
                  "La versión más alta del kernel en la que se inyectará tu kext, mira la tabla de abajo para ver valores posibles"
                )
              ]),
              _vm._v(" "),
              _c("li", [
                _vm._v("Ejemplo: "),
                _c("code", [_vm._v("11.99.99")]),
                _vm._v(" para OS X 10.7")
              ])
            ])
          ]),
          _vm._v(" "),
          _c("li", [
            _c("strong", [_vm._v("PlistPath")]),
            _vm._v(" "),
            _c("ul", [
              _c("li", [
                _vm._v("Ruta al "),
                _c("code", [_vm._v("info.plist")]),
                _vm._v(", oculto dentro del kext")
              ]),
              _vm._v(" "),
              _c("li", [
                _vm._v("ejemplo: "),
                _c("code", [_vm._v("Contents/Info.plist")])
              ])
            ])
          ])
        ]),
        _vm._v(" "),
        _c("details", { staticClass: "custom-block details" }, [
          _c("summary", [_vm._v("Tabla de soporte del Kernel")]),
          _vm._v(" "),
          _c("table", [
            _c("thead", [
              _c("tr", [
                _c("th", { staticStyle: { "text-align": "left" } }, [
                  _vm._v("Versión de OS X")
                ]),
                _vm._v(" "),
                _c("th", { staticStyle: { "text-align": "left" } }, [
                  _vm._v("MinKernel")
                ]),
                _vm._v(" "),
                _c("th", { staticStyle: { "text-align": "left" } }, [
                  _vm._v("MaxKernel")
                ])
              ])
            ]),
            _vm._v(" "),
            _c("tbody", [
              _c("tr", [
                _c("td", { staticStyle: { "text-align": "left" } }, [
                  _vm._v("10.4")
                ]),
                _vm._v(" "),
                _c("td", { staticStyle: { "text-align": "left" } }, [
                  _vm._v("8.0.0")
                ]),
                _vm._v(" "),
                _c("td", { staticStyle: { "text-align": "left" } }, [
                  _vm._v("8.99.99")
                ])
              ]),
              _vm._v(" "),
              _c("tr", [
                _c("td", { staticStyle: { "text-align": "left" } }, [
                  _vm._v("10.5")
                ]),
                _vm._v(" "),
                _c("td", { staticStyle: { "text-align": "left" } }, [
                  _vm._v("9.0.0")
                ]),
                _vm._v(" "),
                _c("td", { staticStyle: { "text-align": "left" } }, [
                  _vm._v("9.99.99")
                ])
              ]),
              _vm._v(" "),
              _c("tr", [
                _c("td", { staticStyle: { "text-align": "left" } }, [
                  _vm._v("10.6")
                ]),
                _vm._v(" "),
                _c("td", { staticStyle: { "text-align": "left" } }, [
                  _vm._v("10.0.0")
                ]),
                _vm._v(" "),
                _c("td", { staticStyle: { "text-align": "left" } }, [
                  _vm._v("10.99.99")
                ])
              ]),
              _vm._v(" "),
              _c("tr", [
                _c("td", { staticStyle: { "text-align": "left" } }, [
                  _vm._v("10.7")
                ]),
                _vm._v(" "),
                _c("td", { staticStyle: { "text-align": "left" } }, [
                  _vm._v("11.0.0")
                ]),
                _vm._v(" "),
                _c("td", { staticStyle: { "text-align": "left" } }, [
                  _vm._v("11.99.99")
                ])
              ]),
              _vm._v(" "),
              _c("tr", [
                _c("td", { staticStyle: { "text-align": "left" } }, [
                  _vm._v("10.8")
                ]),
                _vm._v(" "),
                _c("td", { staticStyle: { "text-align": "left" } }, [
                  _vm._v("12.0.0")
                ]),
                _vm._v(" "),
                _c("td", { staticStyle: { "text-align": "left" } }, [
                  _vm._v("12.99.99")
                ])
              ]),
              _vm._v(" "),
              _c("tr", [
                _c("td", { staticStyle: { "text-align": "left" } }, [
                  _vm._v("10.9")
                ]),
                _vm._v(" "),
                _c("td", { staticStyle: { "text-align": "left" } }, [
                  _vm._v("13.0.0")
                ]),
                _vm._v(" "),
                _c("td", { staticStyle: { "text-align": "left" } }, [
                  _vm._v("13.99.99")
                ])
              ]),
              _vm._v(" "),
              _c("tr", [
                _c("td", { staticStyle: { "text-align": "left" } }, [
                  _vm._v("10.10")
                ]),
                _vm._v(" "),
                _c("td", { staticStyle: { "text-align": "left" } }, [
                  _vm._v("14.0.0")
                ]),
                _vm._v(" "),
                _c("td", { staticStyle: { "text-align": "left" } }, [
                  _vm._v("14.99.99")
                ])
              ]),
              _vm._v(" "),
              _c("tr", [
                _c("td", { staticStyle: { "text-align": "left" } }, [
                  _vm._v("10.11")
                ]),
                _vm._v(" "),
                _c("td", { staticStyle: { "text-align": "left" } }, [
                  _vm._v("15.0.0")
                ]),
                _vm._v(" "),
                _c("td", { staticStyle: { "text-align": "left" } }, [
                  _vm._v("15.99.99")
                ])
              ]),
              _vm._v(" "),
              _c("tr", [
                _c("td", { staticStyle: { "text-align": "left" } }, [
                  _vm._v("10.12")
                ]),
                _vm._v(" "),
                _c("td", { staticStyle: { "text-align": "left" } }, [
                  _vm._v("16.0.0")
                ]),
                _vm._v(" "),
                _c("td", { staticStyle: { "text-align": "left" } }, [
                  _vm._v("16.99.99")
                ])
              ]),
              _vm._v(" "),
              _c("tr", [
                _c("td", { staticStyle: { "text-align": "left" } }, [
                  _vm._v("10.13")
                ]),
                _vm._v(" "),
                _c("td", { staticStyle: { "text-align": "left" } }, [
                  _vm._v("17.0.0")
                ]),
                _vm._v(" "),
                _c("td", { staticStyle: { "text-align": "left" } }, [
                  _vm._v("17.99.99")
                ])
              ]),
              _vm._v(" "),
              _c("tr", [
                _c("td", { staticStyle: { "text-align": "left" } }, [
                  _vm._v("10.14")
                ]),
                _vm._v(" "),
                _c("td", { staticStyle: { "text-align": "left" } }, [
                  _vm._v("18.0.0")
                ]),
                _vm._v(" "),
                _c("td", { staticStyle: { "text-align": "left" } }, [
                  _vm._v("18.99.99")
                ])
              ]),
              _vm._v(" "),
              _c("tr", [
                _c("td", { staticStyle: { "text-align": "left" } }, [
                  _vm._v("10.15")
                ]),
                _vm._v(" "),
                _c("td", { staticStyle: { "text-align": "left" } }, [
                  _vm._v("19.0.0")
                ]),
                _vm._v(" "),
                _c("td", { staticStyle: { "text-align": "left" } }, [
                  _vm._v("19.99.99")
                ])
              ]),
              _vm._v(" "),
              _c("tr", [
                _c("td", { staticStyle: { "text-align": "left" } }, [
                  _vm._v("11")
                ]),
                _vm._v(" "),
                _c("td", { staticStyle: { "text-align": "left" } }, [
                  _vm._v("20.0.0")
                ]),
                _vm._v(" "),
                _c("td", { staticStyle: { "text-align": "left" } }, [
                  _vm._v("20.99.99")
                ])
              ])
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "emulate" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#emulate" } }, [
          _vm._v("#")
        ]),
        _vm._v(" Emulate")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Necesario para falsificar CPUs no compatibles como Pentiums y Celerons"
        )
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c("strong", [_vm._v("CpuidMask")]),
          _vm._v(": Deja esto en blanco")
        ]),
        _vm._v(" "),
        _c("li", [
          _c("strong", [_vm._v("CpuidData")]),
          _vm._v(": Deja esto en blanco")
        ])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "force" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#force" } }, [
          _vm._v("#")
        ]),
        _vm._v(" Force")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Utilizado para cargar kexts desde el volumen del sistema, esto es únicamente relevante para sistemas operativos más antiguos donde ciertos kexts no están presentes en el cache (como IONetworkingFamily en 10.6)."
        )
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("En nuestro caso podemos ignorar esto.")]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "block" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#block" } }, [
          _vm._v("#")
        ]),
        _vm._v(" Block")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Bloquea la carga de ciertos kexts. No es relevante para nosotros."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "patch-2" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#patch-2" } }, [
          _vm._v("#")
        ]),
        _vm._v(" Patch")
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("Parchea tanto el kernel como los kexts.")]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "quirks-3" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#quirks-3" } },
          [_vm._v("#")]
        ),
        _vm._v(" Quirks")
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "custom-block tip" }, [
        _c("p", { staticClass: "custom-block-title" }, [_vm._v("Info")]),
        _vm._v(" "),
        _c("p", [
          _vm._v(
            "Ajustes relacionados a el kernel, en nuestro caso habilitaremos lo siguiente:"
          )
        ]),
        _vm._v(" "),
        _c("table", [
          _c("thead", [
            _c("tr", [
              _c("th", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Quirk")
              ]),
              _vm._v(" "),
              _c("th", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Habilitado")
              ]),
              _vm._v(" "),
              _c("th", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Comentario")
              ])
            ])
          ]),
          _vm._v(" "),
          _c("tbody", [
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("AppleCpuPmCfgLock")
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("YES")
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("No es necesario si "),
                _c("code", [_vm._v("CFG-Lock")]),
                _vm._v(" está desactivado en el BIOS")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("AppleXcpmCfgLock")
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("YES")
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("No es necesario si "),
                _c("code", [_vm._v("CFG-Lock")]),
                _vm._v(" está desactivado en el BIOS")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("DisableIOMapper")
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("YES")
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("No es necesario si "),
                _c("code", [_vm._v("VT-D")]),
                _vm._v(" está deshabilitado en el BIOS")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("LapicKernelPanic")
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("NO")
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Las máquinas HP requerirán este quirk")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("PanicNoKextDump")
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("YES")
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } })
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("PowerTimeoutKernelPanic")
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("YES")
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } })
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("XhciPortLimit")
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("YES")
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } })
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("details", { staticClass: "custom-block details" }, [
        _c("summary", [_vm._v("Información más detallada")]),
        _vm._v(" "),
        _c("ul", [
          _c("li", [
            _c("strong", [_vm._v("AppleCpuPmCfgLock")]),
            _vm._v(": YES\n"),
            _c("ul", [
              _c("li", [
                _vm._v(
                  "Solo es necesario cuando CFG-Lock no se puede deshabilitar en BIOS, la contraparte de Clover sería AppleIntelCPUPM.\n"
                ),
                _c("strong", [
                  _vm._v(
                    "Por favor verifica si puedes deshabilitar CFG-Lock, la mayoría de los sistemas no arrancarán con él, por lo que requieren el uso de este quirk"
                  )
                ])
              ])
            ])
          ]),
          _vm._v(" "),
          _c("li", [
            _c("strong", [_vm._v("AppleXcpmCfgLock")]),
            _vm._v(": YES\n"),
            _c("ul", [
              _c("li", [
                _vm._v(
                  "Solo es necesario cuando CFG-Lock no se puede deshabilitar en BIOS, la contraparte de Clover sería KernelPM. "
                ),
                _c("strong", [
                  _vm._v(
                    "Por favor verifica si puedes deshabilitar CFG-Lock, la mayoría de los sistemas no arrancarán con él, por lo que requieren el uso de este quirk"
                  )
                ])
              ])
            ])
          ]),
          _vm._v(" "),
          _c("li", [
            _c("strong", [_vm._v("CustomSMBIOSGuid")]),
            _vm._v(": NO\n"),
            _c("ul", [
              _c("li", [
                _vm._v("Hace parches de GUID para el modo "),
                _c("code", [_vm._v("Custom")]),
                _vm._v(
                  " de UpdateSMBIOSMode. Usualmente relevante para laptops Dell"
                )
              ]),
              _vm._v(" "),
              _c("li", [
                _vm._v("La habilitación de este quirk con el modo "),
                _c("code", [_vm._v("Custom")]),
                _vm._v(
                  " de UpdateSMBIOSMode también puede deshabilitar la inyección de SMBIOS en sistemas operativos que no son de Apple, aunque no recomendamos esto ya que rompe la compatibilildad con BootCamp. Úsalo bajo tu propio riesgo; debe ser utilizado en conjunto con "
                ),
                _c("code", [
                  _vm._v("PlatformInfo -> UpdateSMBIOSMode -> Custom")
                ])
              ])
            ])
          ]),
          _vm._v(" "),
          _c("li", [
            _c("strong", [_vm._v("DisableIoMapper")]),
            _vm._v(": YES\n"),
            _c("ul", [
              _c("li", [
                _vm._v(
                  "Necesario para encontrar la vuelta a VT-D si no puedes desactivarlo desde la BIOS o si lo necesitas para otro SO. Esto es una mejor alternativa a "
                ),
                _c("code", [_vm._v("dart=0")]),
                _vm._v(" ya que el SIP puede quedarse en Catalina")
              ])
            ])
          ]),
          _vm._v(" "),
          _c("li", [
            _c("strong", [_vm._v("DisableLinkeditJettison")]),
            _vm._v(": YES\n"),
            _c("ul", [
              _c("li", [
                _vm._v(
                  "Permite que Lilu y otros tengan rendimiento más estable sin el quirk "
                ),
                _c("code", [_vm._v("keepsyms=1")])
              ])
            ])
          ]),
          _vm._v(" "),
          _c("li", [
            _c("strong", [_vm._v("DisableRtcChecksum")]),
            _vm._v(": NO\n"),
            _c("ul", [
              _c("li", [
                _vm._v(
                  "Impide que AppleRTC escriba en la suma de comprobación primaria (0x58-0x59), necesaria para los usuarios que reciben el reinicio del BIOS o son enviados al modo seguro después del reinicio/apagado"
                )
              ])
            ])
          ]),
          _vm._v(" "),
          _c("li", [
            _c("strong", [_vm._v("ExtendBTFeatureFlags")]),
            _vm._v(" NO\n"),
            _c("ul", [
              _c("li", [
                _vm._v(
                  "Útil para aquellos que tengan problemas con continuity con tarjetas que no sean de Apple/Fenvi"
                )
              ])
            ])
          ]),
          _vm._v(" "),
          _c("li", [
            _c("strong", [_vm._v("LapicKernelPanic")]),
            _vm._v(": NO\n"),
            _c("ul", [
              _c("li", [
                _vm._v(
                  "Inhabilita el kernel panic en la interrupción del kernel de AP, generalmente necesaria para los sistemas HP. El equivalente de Clover es "
                ),
                _c("code", [_vm._v("Kernel LAPIC")])
              ])
            ])
          ]),
          _vm._v(" "),
          _c("li", [
            _c("strong", [_vm._v("LegacyCommpage")]),
            _vm._v(": NO\n"),
            _c("ul", [
              _c("li", [
                _vm._v(
                  "Resuelve el requerimiento de SSS3 para CPUS de 64 bits en macOS, por lo que es principalmente relevanete para CPUs como Pentium 4 de 64 bits (como Prescott)"
                )
              ])
            ])
          ]),
          _vm._v(" "),
          _c("li", [
            _c("strong", [_vm._v("PanicNoKextDump")]),
            _vm._v(": YES\n"),
            _c("ul", [
              _c("li", [
                _vm._v(
                  "Permite leer los registros de kernel panics cuando éstos ocurren"
                )
              ])
            ])
          ]),
          _vm._v(" "),
          _c("li", [
            _c("strong", [_vm._v("PowerTimeoutKernelPanic")]),
            _vm._v(": YES\n"),
            _c("ul", [
              _c("li", [
                _vm._v(
                  "Ayuda a solucionar kernel panics relacionados con los cambios de energía con los drivers de Apple en macOS Catalina, especialmente con audio digital."
                )
              ])
            ])
          ]),
          _vm._v(" "),
          _c("li", [
            _c("strong", [_vm._v("XhciPortLimit")]),
            _vm._v(": YES\n"),
            _c("ul", [
              _c("li", [
                _vm._v(
                  "Este es en realidad el parche de límite de 15 puertos, no confíes en él, ya que no es una solución garantizada para reparar USBs. Crea un "
                ),
                _c(
                  "a",
                  {
                    attrs: {
                      href:
                        "https://dortania.github.io/OpenCore-Post-Install/usb/",
                      target: "_blank",
                      rel: "noopener noreferrer"
                    }
                  },
                  [_vm._v("USB map"), _c("OutboundLink")],
                  1
                ),
                _vm._v(" cuando sea posible.")
              ])
            ])
          ])
        ]),
        _vm._v(" "),
        _c("p", [
          _vm._v(
            "Esto es porque UsbInjectAll reimplementa la funcionalidad incorporada de macOS sin la sintonización adecuada. Es mucho más sencillo describir sus puertos en un solo kext con una sola plist, que no desperdiciará la memoria de tiempo de ejecución."
          )
        ])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "scheme" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#scheme" } }, [
          _vm._v("#")
        ]),
        _vm._v(" Scheme")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Configuraciones relacionadas al arranque legacy (10.4-10.6). La mayoría de los usuarios pueden saltearse esto, pero si planeas en arrancar versiones legacy puedes ver la información abajo:"
        )
      ]),
      _vm._v(" "),
      _c("details", { staticClass: "custom-block details" }, [
        _c("summary", [_vm._v("Información más detallada")]),
        _vm._v(" "),
        _c("ul", [
          _c("li", [
            _c("p", [_c("strong", [_vm._v("FuzzyMatch")]), _vm._v(": True")]),
            _vm._v(" "),
            _c("ul", [
              _c("li", [
                _vm._v(
                  "Usado para ignorar sumas de comprobación (checksums) con kernelcache, optando con el último cache disponible. Puede ayudar a mejorar el rendimiendo en muchas computadoras en 10.6"
                )
              ])
            ])
          ]),
          _vm._v(" "),
          _c("li", [
            _c("p", [_c("strong", [_vm._v("KernelArch")]), _vm._v(": x86_64")]),
            _vm._v(" "),
            _c("ul", [
              _c("li", [
                _vm._v(
                  "Configura la arquitectura del kernel; puedes elegir entre "
                ),
                _c("code", [_vm._v("Auto")]),
                _vm._v(", "),
                _c("code", [_vm._v("i386")]),
                _vm._v(" (32-bit), y "),
                _c("code", [_vm._v("x86_64")]),
                _vm._v(" (64-bit).")
              ]),
              _vm._v(" "),
              _c("li", [
                _vm._v(
                  "Si estás planeando en arrancar versiones antiguas que requieren un kernel de 32 bits (como 10.4 y 10.5), recomendamos que lo configures a "
                ),
                _c("code", [_vm._v("Auto")]),
                _vm._v(
                  " y dejes que macOS decida basado en tu SMBIOS. Mira la tabla de abajo para ver los valores soportados\n"
                ),
                _c("ul", [
                  _c("li", [
                    _vm._v("10.4-10.5 — "),
                    _c("code", [_vm._v("x86_64")]),
                    _vm._v(", "),
                    _c("code", [_vm._v("i386")]),
                    _vm._v(" o "),
                    _c("code", [_vm._v("i386-user32")]),
                    _vm._v(" "),
                    _c("ul", [
                      _c("li", [
                        _c("code", [_vm._v("i386-user32")]),
                        _vm._v(
                          " refiere a el espacio de usuario de 32 bits, por lo que las CPUs de 32 bits deben usar esto (o CPUs que no tengan SSSE3)(or CPUs missing SSSE3)"
                        )
                      ]),
                      _vm._v(" "),
                      _c("li", [
                        _c("code", [_vm._v("x86_64")]),
                        _vm._v(
                          " tendrá un espacio de kernel de 32 bits, pero asegurará un espacio de usuario de 64 bits en 10.4/5"
                        )
                      ])
                    ])
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("10.6 — "),
                    _c("code", [_vm._v("i386")]),
                    _vm._v(", "),
                    _c("code", [_vm._v("i386-user32")]),
                    _vm._v(", o "),
                    _c("code", [_vm._v("x86_64")])
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("10.7 — "),
                    _c("code", [_vm._v("i386")]),
                    _vm._v(" o "),
                    _c("code", [_vm._v("x86_64")])
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("10.8 y posterior — "),
                    _c("code", [_vm._v("x86_64")])
                  ])
                ])
              ])
            ])
          ]),
          _vm._v(" "),
          _c("li", [
            _c("p", [_c("strong", [_vm._v("KernelCache")]), _vm._v(": Auto")]),
            _vm._v(" "),
            _c("ul", [
              _c("li", [
                _vm._v(
                  "Configura el tipo de cache del kernel, principalmente relevante para depuración, por lo que recomendamos "
                ),
                _c("code", [_vm._v("Auto")]),
                _vm._v(" para obtener el mejor soporte.")
              ])
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "misc" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#misc" } }, [
          _vm._v("#")
        ]),
        _vm._v(" Misc")
      ]),
      _vm._v(" "),
      _c("p", [
        _c("img", {
          attrs: {
            src: require("../images/config/config-universal/misc.png"),
            alt: "Misc"
          }
        })
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "boot" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#boot" } }, [
          _vm._v("#")
        ]),
        _vm._v(" Boot")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Configuración para la pantalla de inicio (Deja todo como predeterminado)."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "debug" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#debug" } }, [
          _vm._v("#")
        ]),
        _vm._v(" Debug")
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "custom-block tip" }, [
        _c("p", { staticClass: "custom-block-title" }, [_vm._v("Info")]),
        _vm._v(" "),
        _c("p", [
          _vm._v(
            "Útil para depurar problemas de arranque de OpenCore (cambiaremos todo "
          ),
          _c("em", [_vm._v("menos")]),
          _vm._v(" "),
          _c("code", [_vm._v("DisplayDelay")]),
          _vm._v("):")
        ]),
        _vm._v(" "),
        _c("table", [
          _c("thead", [
            _c("tr", [
              _c("th", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Quirk")
              ]),
              _vm._v(" "),
              _c("th", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Habilitado")
              ])
            ])
          ]),
          _vm._v(" "),
          _c("tbody", [
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("AppleDebug")
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("YES")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("ApplePanic")
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("YES")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("DisableWatchDog")
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("YES")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Target")
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("67")
              ])
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("details", { staticClass: "custom-block details" }, [
        _c("summary", [_vm._v("Información más detallada")]),
        _vm._v(" "),
        _c("ul", [
          _c("li", [
            _c("strong", [_vm._v("AppleDebug")]),
            _vm._v(": YES\n"),
            _c("ul", [
              _c("li", [
                _vm._v(
                  "Habilita el logging de boot.efi. Esto es útil para hacer depuración. Ten en cuenta que esto es soportado en 10.15.4 y posterior."
                )
              ])
            ])
          ]),
          _vm._v(" "),
          _c("li", [
            _c("strong", [_vm._v("ApplePanic")]),
            _vm._v(": YES\n"),
            _c("ul", [
              _c("li", [_vm._v("Intenta registrar kernel panics en el disco")])
            ])
          ]),
          _vm._v(" "),
          _c("li", [
            _c("strong", [_vm._v("DisableWatchDog")]),
            _vm._v(": YES\n"),
            _c("ul", [
              _c("li", [
                _vm._v(
                  "Deshabilita el watchdog UEFI, puede ayudar con problemas de arranque temprano"
                )
              ])
            ])
          ]),
          _vm._v(" "),
          _c("li", [
            _c("strong", [_vm._v("DisplayLevel")]),
            _vm._v(": "),
            _c("code", [_vm._v("2147483650")]),
            _vm._v(" "),
            _c("ul", [
              _c("li", [
                _vm._v(
                  "Muestra aún más información de depuración, requiere la versión DEBUG de OpenCore"
                )
              ])
            ])
          ]),
          _vm._v(" "),
          _c("li", [
            _c("strong", [_vm._v("SerialInit")]),
            _vm._v(": NO\n"),
            _c("ul", [
              _c("li", [
                _vm._v(
                  "Necesario para configurar salida de seriales con OpenCore"
                )
              ])
            ])
          ]),
          _vm._v(" "),
          _c("li", [
            _c("strong", [_vm._v("SysReport")]),
            _vm._v(": NO\n"),
            _c("ul", [
              _c("li", [
                _vm._v(
                  "Útil para depurar y otros aspectos como volcar tablas ACPI"
                )
              ]),
              _vm._v(" "),
              _c("li", [
                _vm._v(
                  "Ten en cuenta que esto es limitado a las versiones DEBUG de OpenCore."
                )
              ])
            ])
          ]),
          _vm._v(" "),
          _c("li", [
            _c("strong", [_vm._v("Target")]),
            _vm._v(": "),
            _c("code", [_vm._v("67")]),
            _vm._v(" "),
            _c("ul", [
              _c("li", [
                _vm._v(
                  "Muestra más información de depuración, requiere la versión de depuración de OpenCore"
                )
              ])
            ])
          ])
        ]),
        _vm._v(" "),
        _c(
          "p",
          [
            _vm._v("Estos valores se basan en los calculados en "),
            _c("RouterLink", { attrs: { to: "/troubleshooting/debug.html" } }, [
              _vm._v("Depuración de OpenCore")
            ])
          ],
          1
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "security" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#security" } },
          [_vm._v("#")]
        ),
        _vm._v(" Security")
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "custom-block tip" }, [
        _c("p", { staticClass: "custom-block-title" }, [_vm._v("Info")]),
        _vm._v(" "),
        _c("p", [
          _vm._v("Security se explica por sí sola, "),
          _c("strong", [_vm._v("no te lo saltes")]),
          _vm._v(". Vamos a cambiar lo siguiente:")
        ]),
        _vm._v(" "),
        _c("table", [
          _c("thead", [
            _c("tr", [
              _c("th", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Quirk")
              ]),
              _vm._v(" "),
              _c("th", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Habilitado")
              ]),
              _vm._v(" "),
              _c("th", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Comentario")
              ])
            ])
          ]),
          _vm._v(" "),
          _c("tbody", [
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("AllowNvramReset")
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("YES")
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } })
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("AllowSetDefault")
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("YES")
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } })
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("ScanPolicy")
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("0")
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } })
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("SecureBootModel")
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Default")
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v(
                  "Esta es una palabra la cual distingue entre mayúsculas y minúsculas, configúrala a "
                ),
                _c("code", [_vm._v("Disabled")]),
                _vm._v(
                  " si no quieres arranque seguro (por ejemplo en el caso de que requieras los Web Drivers de Nvidia)"
                )
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Vault")
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Optional")
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v(
                  "Esta es una palabra, no es opcional omitir esta configuración. Lo lamentarás si no lo configuras en "
                ),
                _c("code", [_vm._v("Optional")]),
                _vm._v(
                  ", ten en cuenta que distingue entre mayúsculas y minúsculas"
                )
              ])
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("details", { staticClass: "custom-block details" }, [
        _c("summary", [_vm._v("Información más detallada")]),
        _vm._v(" "),
        _c("ul", [
          _c("li", [
            _c("strong", [_vm._v("AllowNvramReset")]),
            _vm._v(": YES\n"),
            _c("ul", [
              _c("li", [
                _vm._v(
                  "Permite restablecer NVRAM tanto en el selector de arranque como al presionar "
                ),
                _c("code", [_vm._v("Cmd+Opt+P+R")])
              ])
            ])
          ]),
          _vm._v(" "),
          _c("li", [
            _c("strong", [_vm._v("AllowSetDefault")]),
            _vm._v(": YES\n"),
            _c("ul", [
              _c("li", [
                _vm._v("Permite que "),
                _c("code", [_vm._v("CTRL+Enter")]),
                _vm._v(" y "),
                _c("code", [_vm._v("CTRL+Index")]),
                _vm._v(
                  " configuren el dispositivo de arranque predeterminado en el selector"
                )
              ])
            ])
          ]),
          _vm._v(" "),
          _c("li", [
            _c("strong", [_vm._v("ApECID")]),
            _vm._v(": 0\n"),
            _c("ul", [
              _c("li", [
                _vm._v(
                  "Usado para compensar identificadores de arranque seguro, actualmente este quirk es faltoso debido a un bug en el instalador de macOS así que te recomendamos que lo dejes como está por defecto."
                )
              ])
            ])
          ]),
          _vm._v(" "),
          _c("li", [
            _c("strong", [_vm._v("AuthRestart")]),
            _vm._v(": NO\n"),
            _c("ul", [
              _c("li", [
                _vm._v(
                  "Habilita el reinicio autenticado para FileVault 2, por lo que no se requiere contraseña al reiniciar. Puede considerarse un riesgo de seguridad así que es opcional"
                )
              ])
            ])
          ]),
          _vm._v(" "),
          _c("li", [
            _c("strong", [_vm._v("BootProtect")]),
            _vm._v(": Bootstrap\n"),
            _c("ul", [
              _c("li", [
                _vm._v("Permite el uso de Bootstrap.efi dentro de "),
                _c("code", [_vm._v("EFI/OC/Bootstrap")]),
                _vm._v(
                  " en lugar de BOOTx64.efi. Útil para aquellos que desean arrancar con rEFInd o evitar sobrescribir BOOTx64.efi con Windows. El uso adecuado de estos quirks está cubierto aquí. "
                ),
                _c(
                  "a",
                  {
                    attrs: {
                      href:
                        "https://inyextciones.github.io/OpenCore-Post-Install/multiboot/bootstrap.html#preparation",
                      target: "_blank",
                      rel: "noopener noreferrer"
                    }
                  },
                  [_vm._v("Usar Bootstrap.efi"), _c("OutboundLink")],
                  1
                )
              ])
            ])
          ]),
          _vm._v(" "),
          _c("li", [
            _c("strong", [_vm._v("DmgLoading")]),
            _vm._v(": Signed\n"),
            _c("ul", [
              _c("li", [_vm._v("Asegura la carga únicamente de DMGs firmados")])
            ])
          ]),
          _vm._v(" "),
          _c("li", [
            _c("strong", [_vm._v("ExposeSensitiveData")]),
            _vm._v(": "),
            _c("code", [_vm._v("6")]),
            _vm._v(" "),
            _c("ul", [
              _c("li", [
                _vm._v(
                  "Muestra más información de depuración, requiere la versión de depuración de OpenCore"
                )
              ])
            ])
          ]),
          _vm._v(" "),
          _c("li", [
            _c("strong", [_vm._v("Vault")]),
            _vm._v(": "),
            _c("code", [_vm._v("Optional")]),
            _vm._v(" "),
            _c("ul", [
              _c("li", [
                _vm._v(
                  "No trataremos el Vaulting, por lo que podemos ignorar esto, ten en cuenta que "
                ),
                _c("strong", [
                  _vm._v("no podrás bootear si esto está configurado en "),
                  _c("code", [_vm._v("Secure")])
                ])
              ]),
              _vm._v(" "),
              _c("li", [
                _vm._v(
                  "Esta es una palabra, no es opcional omitir esta configuración. Lo lamentarás si no lo configuras en "
                ),
                _c("code", [_vm._v("Optional")]),
                _vm._v(
                  ", ten en cuenta que distingue entre mayúsculas y minúsculas"
                )
              ])
            ])
          ]),
          _vm._v(" "),
          _c("li", [
            _c("strong", [_vm._v("ScanPolicy")]),
            _vm._v(": "),
            _c("code", [_vm._v("0")]),
            _vm._v(" "),
            _c("ul", [
              _c("li", [
                _c("code", [_vm._v("0")]),
                _vm._v(
                  " te permite ver todas las unidades disponibles, consulta la sección "
                ),
                _c(
                  "a",
                  {
                    attrs: {
                      href:
                        "https://dortania.github.io/OpenCore-Post-Install/universal/security.html",
                      target: "_blank",
                      rel: "noopener noreferrer"
                    }
                  },
                  [_vm._v("Seguridad"), _c("OutboundLink")],
                  1
                ),
                _vm._v(" para obtener más detalles. "),
                _c("strong", [
                  _vm._v(
                    "No arrancará dispositivos USB con este ajuste predeterminado"
                  )
                ])
              ])
            ])
          ]),
          _vm._v(" "),
          _c("li", [
            _c("strong", [_vm._v("SecureBootModel")]),
            _vm._v(": Default\n"),
            _c("ul", [
              _c("li", [
                _vm._v(
                  "Habilita la funcionalidad del arranque seguro de Apple en macOS, por favor refiérete a "
                ),
                _c(
                  "a",
                  {
                    attrs: {
                      href:
                        "https://inyextciones.github.io/OpenCore-Post-Install/universal/security.html",
                      target: "_blank",
                      rel: "noopener noreferrer"
                    }
                  },
                  [_vm._v("Seguridad"), _c("OutboundLink")],
                  1
                ),
                _vm._v(" para más información.")
              ]),
              _vm._v(" "),
              _c(
                "li",
                [
                  _vm._v(
                    "Nota: Los usuarios pueden encontrar fallas de arranque cuando actualizen OpenCore en un sistema que ya contenga una instalación. Para resolver esto, dirígete aquí: "
                  ),
                  _c(
                    "RouterLink",
                    {
                      attrs: {
                        to:
                          "/troubleshooting/extended/kernel-issues.html#trancado-en-ocb-loadimage-failed-security-violation"
                      }
                    },
                    [
                      _vm._v(
                        "Trancado en OCB: LoadImage failed - Security Violation"
                      )
                    ]
                  )
                ],
                1
              )
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "tools" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#tools" } }, [
          _vm._v("#")
        ]),
        _vm._v(" Tools")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          'Utilizado para ejecutar herramientas de depuración OC como el shell, la función de "Snapshot" de ProperTree las agregará por tí.'
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "entries" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#entries" } }, [
          _vm._v("#")
        ]),
        _vm._v(" Entries")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Se usa para especificar rutas de inicio irregulares que no se pueden encontrar naturalmente con OpenCore."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("No se cubrirá aquí, consulte 8.6 de "),
        _c(
          "a",
          {
            attrs: {
              href:
                "https://github.com/acidanthera/OpenCorePkg/blob/master/Docs/Configuration.pdf",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_vm._v("Configuration.pdf"), _c("OutboundLink")],
          1
        ),
        _vm._v(" para obtener más información")
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "nvram" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#nvram" } }, [
          _vm._v("#")
        ]),
        _vm._v(" NVRAM")
      ]),
      _vm._v(" "),
      _c("p", [
        _c("img", {
          attrs: {
            src: require("../images/config/config-universal/nvram.png"),
            alt: "NVRAM"
          }
        })
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "add-4" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#add-4" } }, [
          _vm._v("#")
        ]),
        _vm._v(" Add")
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "custom-block tip" }, [
        _c("p", { staticClass: "custom-block-title" }, [
          _vm._v("4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14")
        ]),
        _vm._v(" "),
        _c("p", [
          _vm._v(
            "Utilizado para el escalado de la interfaz de usuario de OpenCore, el valor predeterminado funcionará para nosotros. Consulta la sección detallada para obtener más información."
          )
        ])
      ]),
      _vm._v(" "),
      _c("details", { staticClass: "custom-block details" }, [
        _c("summary", [_vm._v("Información más detallada")]),
        _vm._v(" "),
        _c("p", [
          _vm._v(
            "Ruta del Booter, utilizada principalmente para escalar la interfaz de usuario"
          )
        ]),
        _vm._v(" "),
        _c("ul", [
          _c("li", [
            _c("p", [_c("strong", [_vm._v("UIScale")]), _vm._v(":")]),
            _vm._v(" "),
            _c("ul", [
              _c("li", [
                _c("code", [_vm._v("01")]),
                _vm._v(": Resolución estándar")
              ]),
              _vm._v(" "),
              _c("li", [
                _c("code", [_vm._v("02")]),
                _vm._v(
                  ": HiDPI (generalmente requerido para FileVault para funcionar correctamente en pantallas más pequeñas)"
                )
              ])
            ])
          ]),
          _vm._v(" "),
          _c("li", [
            _c("p", [
              _c("strong", [_vm._v("DefaultBackgroundColor")]),
              _vm._v(": Color de fondo utilizado por boot.efi")
            ]),
            _vm._v(" "),
            _c("ul", [
              _c("li", [
                _c("code", [_vm._v("00000000")]),
                _vm._v(": Syrah Negro")
              ]),
              _vm._v(" "),
              _c("li", [
                _c("code", [_vm._v("BFBFBF00")]),
                _vm._v(": Gris Claro")
              ])
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "custom-block tip" }, [
        _c("p", { staticClass: "custom-block-title" }, [
          _vm._v("4D1FDA02-38C7-4A6A-9CC6-4BCCA8B30102")
        ]),
        _vm._v(" "),
        _c("p", [
          _vm._v(
            "GUID de NVRAM de OpenCore, principalmente relevante para usuarios de RTCMemoryFixup"
          )
        ])
      ]),
      _vm._v(" "),
      _c("details", { staticClass: "custom-block details" }, [
        _c("summary", [_vm._v("Información más detallada")]),
        _vm._v(" "),
        _c("ul", [
          _c("li", [
            _c("strong", [_vm._v("rtc-blacklist")]),
            _vm._v(": <>\n"),
            _c("ul", [
              _c("li", [
                _vm._v(
                  "Para ser usado en conjunto con RTCMemoryFixup, dirígete aquí para obtener más información: "
                ),
                _c(
                  "a",
                  {
                    attrs: {
                      href:
                        "https://dortania.github.io/OpenCore-Post-Install/misc/rtc.html#finding-our-bad-rtc-region",
                      target: "_blank",
                      rel: "noopener noreferrer"
                    }
                  },
                  [
                    _vm._v("Arreglando errores de escritura del RTC"),
                    _c("OutboundLink")
                  ],
                  1
                )
              ]),
              _vm._v(" "),
              _c("li", [
                _vm._v("La mayoría de usuarios pueden ignorar esta sección")
              ])
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "custom-block tip" }, [
        _c("p", { staticClass: "custom-block-title" }, [
          _vm._v("7C436110-AB2A-4BBB-A880-FE41995C9F82")
        ]),
        _vm._v(" "),
        _c("p", [
          _vm._v("Máscara de bits de Protección de integridad del sistema")
        ]),
        _vm._v(" "),
        _c("ul", [
          _c("li", [
            _c("strong", [_vm._v("boot-args de uso general")]),
            _vm._v(":")
          ])
        ]),
        _vm._v(" "),
        _c("table", [
          _c("thead", [
            _c("tr", [
              _c("th", { staticStyle: { "text-align": "left" } }, [
                _vm._v("boot-args")
              ]),
              _vm._v(" "),
              _c("th", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Descripción")
              ])
            ])
          ]),
          _vm._v(" "),
          _c("tbody", [
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _c("strong", [_vm._v("-v")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v(
                  "Esto habilita el modo detallado, que muestra todo el texto detrás de escena que se desplaza al iniciar, en lugar del logotipo de Apple y la barra de progreso. Es invaluable para cualquier Hackintosher, ya que le da una mirada interna al proceso de arranque y puede ayudarlo a identificar problemas, problemas con kexts, etc."
                )
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _c("strong", [_vm._v("debug=0x100")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v(
                  "Esto deshabilita el watchdog de macOS que ayuda a evitar el reinicio en caso de un kernel panic. De esa manera, puedes "
                ),
                _c("em", [_vm._v("con suerte")]),
                _vm._v(
                  " obtener información útil y usarla para solucionar este problema."
                )
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _c("strong", [_vm._v("keepsyms=1")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v(
                  "Esta es una configuración complementaria para debug=0x100 que le dice al sistema operativo que también imprima los símbolos en un kernel panic. Eso puede dar una idea más útil de lo que está causando el pánico en sí."
                )
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _c("strong", [_vm._v("alcid=1")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v(
                  "Utilizado para configurar el layout-id para AppleALC, consulta "
                ),
                _c(
                  "a",
                  {
                    attrs: {
                      href:
                        "https://github.com/acidanthera/applealc/wiki/supported-codecs",
                      target: "_blank",
                      rel: "noopener noreferrer"
                    }
                  },
                  [_vm._v("códecs compatibles"), _c("OutboundLink")],
                  1
                ),
                _vm._v(
                  " para averiguar qué layout usar para su sistema específico. Más información sobre esto está cubierta en la "
                ),
                _c(
                  "a",
                  {
                    attrs: {
                      href: "https://dortania.github.io/OpenCore-Post-Install/",
                      target: "_blank",
                      rel: "noopener noreferrer"
                    }
                  },
                  [_vm._v("Página de post instalación"), _c("OutboundLink")],
                  1
                )
              ])
            ])
          ])
        ]),
        _vm._v(" "),
        _c("ul", [
          _c("li", [
            _c("strong", [_vm._v("GPU-Specific boot-args")]),
            _vm._v(":")
          ])
        ]),
        _vm._v(" "),
        _c("table", [
          _c("thead", [
            _c("tr", [
              _c("th", { staticStyle: { "text-align": "left" } }, [
                _vm._v("boot-args")
              ]),
              _vm._v(" "),
              _c("th", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Description")
              ])
            ])
          ]),
          _vm._v(" "),
          _c("tbody", [
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _c("strong", [_vm._v("agdpmod=pikera")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v(
                  "Se usa para deshabilitar el BoardID en las GPUs Navi (series RX 5000). Sin esto obtendrás una pantalla negra. "
                ),
                _c("strong", [_vm._v("No lo uses si no tienes Navi")]),
                _vm._v(
                  " (es decir, las tarjetas Polaris y Vega no deberían usar esto)"
                )
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _c("strong", [_vm._v("nvda_drv_vrl=1")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v(
                  "Se utiliza para habilitar los Web Drivers de Nvidia en las tarjetas Maxwell y Pascal en Sierra y High Sierra"
                )
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _c("strong", [_vm._v("-wegnoegpu")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v(
                  "Se usa para deshabilitar todas las otras GPU(s) que no sean la iGPU de Intel. Util para aquellos que deseen ejecutar versiones más nuevas de macOS donde su GPU dedicada no es compatible"
                )
              ])
            ])
          ])
        ]),
        _vm._v(" "),
        _c("ul", [
          _c("li", [
            _c("p", [
              _c("strong", [_vm._v("csr-active-config")]),
              _vm._v(": "),
              _c("code", [_vm._v("00000000")])
            ]),
            _vm._v(" "),
            _c("ul", [
              _c("li", [
                _vm._v(
                  "Configuración de la 'Protección de integridad del sistema' (SIP). En general, se recomienda cambiar esto con "
                ),
                _c("code", [_vm._v("csrutil")]),
                _vm._v(" a través de la partición de recuperación.")
              ]),
              _vm._v(" "),
              _c(
                "li",
                [
                  _vm._v(
                    "csr-active-config de forma predeterminada se establece en "
                  ),
                  _c("code", [_vm._v("00000000")]),
                  _vm._v(
                    " que habilita la Protección de integridad del sistema. Puedes elegir una cantidad de valores diferentes, pero en general recomendamos mantener esto habilitado para tener mayor seguridad. Puedes encontrar más información en nuestra página de solución de problemas: "
                  ),
                  _c(
                    "RouterLink",
                    {
                      attrs: {
                        to:
                          "/troubleshooting/extended/post-issues.html#deshabilitando-el-sip"
                      }
                    },
                    [_vm._v("Desactivar el SIP")]
                  )
                ],
                1
              )
            ])
          ]),
          _vm._v(" "),
          _c("li", [
            _c("p", [
              _c("strong", [_vm._v("run-efi-updater")]),
              _vm._v(": "),
              _c("code", [_vm._v("No")])
            ]),
            _vm._v(" "),
            _c("ul", [
              _c("li", [
                _vm._v(
                  "Esto es utilizado para prevenir la instalación de los paquetes de firmware de Apple. Esto es especialmente importante para hardware de PCs de escritorio debido a que estas actualizaciones de firmware se crashearán en las actualizaciones."
                )
              ])
            ])
          ]),
          _vm._v(" "),
          _c("li", [
            _c("p", [_c("strong", [_vm._v("prev-lang:kbd")]), _vm._v(": <>")]),
            _vm._v(" "),
            _c("ul", [
              _c("li", [
                _vm._v("Necesario para teclados no latinos en el formato de "),
                _c("code", [_vm._v("lang-COUNTRY:keyboard")]),
                _vm._v(
                  ", se recomienda mantener en blanco aunque puede especificarlo ("
                ),
                _c("strong", [
                  _vm._v("El valor predeterminado en el sample.plist es ruso")
                ]),
                _vm._v("):")
              ]),
              _vm._v(" "),
              _c("li", [
                _vm._v("Inglés de Estados Unidos: "),
                _c("code", [_vm._v("en-US:0")]),
                _vm._v("("),
                _c("code", [_vm._v("656e2d55533a30")]),
                _vm._v(" en HEX)")
              ]),
              _vm._v(" "),
              _c("li", [
                _vm._v("Una lista completa puede ser encontrada en "),
                _c(
                  "a",
                  {
                    attrs: {
                      href:
                        "https://github.com/acidanthera/OpenCorePkg/blob/master/Utilities/AppleKeyboardLayouts/AppleKeyboardLayouts.txt",
                      target: "_blank",
                      rel: "noopener noreferrer"
                    }
                  },
                  [_vm._v("AppleKeyboardLayouts.txt"), _c("OutboundLink")],
                  1
                )
              ]),
              _vm._v(" "),
              _c("li", [
                _vm._v("Sugerencia: "),
                _c("code", [_vm._v("prev-lang:kbd")]),
                _vm._v(
                  " se puede cambiar a un string para que puedas ingresar "
                ),
                _c("code", [_vm._v("en-US: 0")]),
                _vm._v(" directamente en lugar de convertir a HEX")
              ])
            ])
          ])
        ]),
        _vm._v(" "),
        _c("table", [
          _c("thead", [
            _c("tr", [
              _c("th", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Key")
              ]),
              _vm._v(" "),
              _c("th", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Type")
              ]),
              _vm._v(" "),
              _c("th", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Value")
              ])
            ])
          ]),
          _vm._v(" "),
          _c("tbody", [
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("prev-lang:kbd")
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("String")
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("en-US:0")
              ])
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "delete-3" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#delete-3" } },
          [_vm._v("#")]
        ),
        _vm._v(" Delete")
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "custom-block tip" }, [
        _c("p", { staticClass: "custom-block-title" }, [_vm._v("Información")]),
        _vm._v(" "),
        _c("p", [
          _vm._v(
            "Vuelve a escribir a la fuerza las variables de NVRAM. Ten en cuenta que "
          ),
          _c("code", [_vm._v("Add")]),
          _vm._v(" "),
          _c("strong", [_vm._v("no sobrescribirá")]),
          _vm._v(
            " los valores ya presentes en NVRAM, por lo que  valores como "
          ),
          _c("code", [_vm._v("boot-args")]),
          _vm._v(
            " deben dejarse solos. En nuestro caso, cambiaremos lo siguiente:"
          )
        ]),
        _vm._v(" "),
        _c("table", [
          _c("thead", [
            _c("tr", [
              _c("th", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Quirk")
              ]),
              _vm._v(" "),
              _c("th", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Habilitado")
              ])
            ])
          ]),
          _vm._v(" "),
          _c("tbody", [
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("WriteFlash")
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("YES")
              ])
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("details", { staticClass: "custom-block details" }, [
        _c("summary", [_vm._v("Información más detallada")]),
        _vm._v(" "),
        _c("p", [_c("strong", [_vm._v("LegacyEnable")]), _vm._v(": NO")]),
        _vm._v(" "),
        _c("ul", [
          _c("li", [
            _vm._v(
              "Permite que la NVRAM se almacene en nvram.plist, necesario para sistemas sin NVRAM nativa\n"
            ),
            _c("strong", [_vm._v("LegacyOverwrite")]),
            _vm._v(": NO")
          ]),
          _vm._v(" "),
          _c("li", [
            _vm._v(
              "Permite sobrescribir variables de firmware de la nvram.plist, solo necesario para sistemas sin NVRAM nativa\n"
            ),
            _c("strong", [_vm._v("LegacySchema")])
          ]),
          _vm._v(" "),
          _c("li", [
            _vm._v(
              "Se usa para asignar variables NVRAM, se usa con LegacyEnable establecido en YES\n"
            ),
            _c("strong", [_vm._v("WriteFlash")]),
            _vm._v(": YES")
          ]),
          _vm._v(" "),
          _c("li", [
            _vm._v(
              "Permite escribir en la memoria flash para todas las variables agregadas."
            )
          ])
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "platforminfo" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#platforminfo" } },
          [_vm._v("#")]
        ),
        _vm._v(" PlatformInfo")
      ]),
      _vm._v(" "),
      _c("p", [
        _c("img", {
          attrs: {
            src: require("../images/config/config.plist/coffeelake/smbios.png"),
            alt: "PlatformInfo"
          }
        })
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "custom-block tip" }, [
        _c("p", { staticClass: "custom-block-title" }, [_vm._v("Info")]),
        _vm._v(" "),
        _c("p", [
          _vm._v(
            "Para configurar la información del SMBIOS, usaremos la aplicación "
          ),
          _c(
            "a",
            {
              attrs: {
                href: "https://github.com/corpnewt/GenSMBIOS",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("GenSMBIOS"), _c("OutboundLink")],
            1
          ),
          _vm._v(" hecha por "),
          _c(
            "a",
            {
              attrs: {
                href: "https://github.com/corpnewt/",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("CorpNewt"), _c("OutboundLink")],
            1
          ),
          _vm._v(".")
        ]),
        _vm._v(" "),
        _c("p", [
          _vm._v(
            "Para este ejemplo de Coffee Lake, eligiremos el SMBIOS iMac19,1. Esto está hecho intencionalmente por un tema de compatibilidad. Hay dos SMBIOS principales utilizadas para Coffee Lake"
          )
        ]),
        _vm._v(" "),
        _c("table", [
          _c("thead", [
            _c("tr", [
              _c("th", { staticStyle: { "text-align": "left" } }, [
                _vm._v("SMBIOS")
              ]),
              _vm._v(" "),
              _c("th", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Hardware")
              ])
            ])
          ]),
          _vm._v(" "),
          _c("tbody", [
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("iMac19,1")
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Para Mojave y posterior")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("iMac18,3")
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Para High Sierra y anterior")
              ])
            ])
          ])
        ]),
        _vm._v(" "),
        _c("ul", [
          _c("li", [
            _vm._v(
              "Usarás 18,3 cuando tengas una GPU Pascal o Maxwell y estés limitado a versiones de macOS con Web Drivers"
            )
          ])
        ]),
        _vm._v(" "),
        _c("p", [
          _vm._v(
            "Ejecuta GenSMBIOS, elije la opción 1 para descargar MacSerial y la Opción 3 para seleccionar la SMBIOS que deseas. Esto nos dará una salida similar a la siguiente:"
          )
        ]),
        _vm._v(" "),
        _c("div", { staticClass: "language-sh extra-class" }, [
          _c("pre", { pre: true, attrs: { class: "language-sh" } }, [
            _c("code", [
              _vm._v("  "),
              _c("span", { pre: true, attrs: { class: "token comment" } }, [
                _vm._v(
                  "#######################################################"
                )
              ]),
              _vm._v("\n "),
              _c("span", { pre: true, attrs: { class: "token comment" } }, [
                _vm._v(
                  "#               iMac19,1 SMBIOS Info                  #"
                )
              ]),
              _vm._v("\n"),
              _c("span", { pre: true, attrs: { class: "token comment" } }, [
                _vm._v(
                  "#######################################################"
                )
              ]),
              _vm._v(
                "\n\nType:         iMac19,1\nSerial:       C02XG0FDH7JY\nBoard Serial: C02839303QXH69FJA\nSmUUID:       DBB364D6-44B2-4A02-B922-AB4396F16DA8\n"
              )
            ])
          ])
        ]),
        _c("p", [
          _vm._v("La parte "),
          _c("code", [_vm._v("Type")]),
          _vm._v(" se copia en Generic -> SystemProductName.")
        ]),
        _vm._v(" "),
        _c("p", [
          _vm._v("La parte "),
          _c("code", [_vm._v("Serial")]),
          _vm._v(" se copia en Generic -> SystemSerialNumber.")
        ]),
        _vm._v(" "),
        _c("p", [
          _vm._v("La parte "),
          _c("code", [_vm._v("Board Serial")]),
          _vm._v(" se copia en Generic -> MLB.")
        ]),
        _vm._v(" "),
        _c("p", [
          _vm._v("La parte "),
          _c("code", [_vm._v("SmUUID")]),
          _vm._v(" se copia en Generic -> SystemUUID.")
        ]),
        _vm._v(" "),
        _c("p", [
          _vm._v(
            "Configuramos Generic -> ROM a una ROM de Apple (extraída de una Mac real), la dirección MAC de tu NIC o cualquier dirección MAC aleatoria (podría ser solo 6 bytes aleatorios Para esta guía usaremos "
          ),
          _c("code", [_vm._v("11223300 0000")]),
          _vm._v(". Después de instalar dirígete a la página "),
          _c(
            "a",
            {
              attrs: {
                href:
                  "https://dortania.github.io/OpenCore-Post-Install/universal/iservices.html",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("Arreglando iServices"), _c("OutboundLink")],
            1
          ),
          _vm._v(" para saber cómo encontrar tu dirección MAC real)")
        ]),
        _vm._v(" "),
        _c("p", [
          _c("strong", [
            _vm._v(
              'Recuerda que quieres o una serie no válida o números de serie válidos, pero NO quieres series válidas que están en uso, quieres recibir un mensaje de regreso como: "Serie no válida" o "Fecha de compra no validada"'
            )
          ])
        ]),
        _vm._v(" "),
        _c("p", [
          _c(
            "a",
            {
              attrs: {
                href: "https://checkcoverage.apple.com",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [
              _vm._v("Página de verificación de cobertura de Apple"),
              _c("OutboundLink")
            ],
            1
          )
        ]),
        _vm._v(" "),
        _c("p", [_c("strong", [_vm._v("Automatic")]), _vm._v(": YES")]),
        _vm._v(" "),
        _c("ul", [
          _c("li", [
            _vm._v(
              "Genera PlatformInfo basada en la sección Generic en lugar de las secciones DataHub, NVRAM y SMBIOS"
            )
          ])
        ])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "generic" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#generic" } }, [
          _vm._v("#")
        ]),
        _vm._v(" Generic")
      ]),
      _vm._v(" "),
      _c("details", { staticClass: "custom-block details" }, [
        _c("summary", [_vm._v("Información más detallada")]),
        _vm._v(" "),
        _c("ul", [
          _c("li", [
            _c("p", [_c("strong", [_vm._v("AdviseWindows")]), _vm._v(": NO")]),
            _vm._v(" "),
            _c("ul", [
              _c("li", [
                _vm._v(
                  "Se usa cuando la partición EFI no es la primera en la unidad de Windows"
                )
              ])
            ])
          ]),
          _vm._v(" "),
          _c("li", [
            _c("p", [
              _c("strong", [_vm._v("SystemMemoryStatus")]),
              _vm._v(": Auto")
            ]),
            _vm._v(" "),
            _c("ul", [
              _c("li", [
                _vm._v(
                  'Establece si la memoria está soldada o no en la información del SMBIOS, esto es puramente cosmético, por lo que recomendamos "Auto"'
                )
              ])
            ])
          ]),
          _vm._v(" "),
          _c("li", [
            _c("p", [
              _c("strong", [_vm._v("ProcessorType")]),
              _vm._v(": "),
              _c("code", [_vm._v("0")])
            ]),
            _vm._v(" "),
            _c("ul", [
              _c("li", [
                _vm._v("Ponlo en "),
                _c("code", [_vm._v("0")]),
                _vm._v(
                  " para la detección automática del tipo de procesador. Sin embargo, este valor puede ser cambiado si lo deseas. Mira "
                ),
                _c(
                  "a",
                  {
                    attrs: {
                      href:
                        "https://github.com/acidanthera/OpenCorePkg/blob/master/Include/Apple/IndustryStandard/AppleSmBios.h",
                      target: "_blank",
                      rel: "noopener noreferrer"
                    }
                  },
                  [_vm._v("AppleSmBios.h"), _c("OutboundLink")],
                  1
                ),
                _vm._v(" para ver valores posibles.")
              ])
            ])
          ]),
          _vm._v(" "),
          _c("li", [
            _c("p", [_c("strong", [_vm._v("SpoofVendor")]), _vm._v(": YES")]),
            _vm._v(" "),
            _c("ul", [
              _c("li", [
                _vm._v(
                  "Intercambia el campo del proveedor por Acidanthera. Generalmente no es seguro usar Apple como proveedor."
                )
              ])
            ])
          ]),
          _vm._v(" "),
          _c("li", [
            _c("p", [_c("strong", [_vm._v("UpdateDataHub")]), _vm._v(": YES")]),
            _vm._v(" "),
            _c("ul", [_c("li", [_vm._v("Actualiza campos de Data Hub")])])
          ]),
          _vm._v(" "),
          _c("li", [
            _c("p", [_c("strong", [_vm._v("UpdateNVRAM")]), _vm._v(": YES")]),
            _vm._v(" "),
            _c("ul", [_c("li", [_vm._v("Actualiza campos de NVRAM")])])
          ]),
          _vm._v(" "),
          _c("li", [
            _c("p", [_c("strong", [_vm._v("UpdateSMBIOS")]), _vm._v(": YES")]),
            _vm._v(" "),
            _c("ul", [_c("li", [_vm._v("Actualiza campos SMBIOS")])])
          ]),
          _vm._v(" "),
          _c("li", [
            _c("p", [
              _c("strong", [_vm._v("UpdateSMBIOSMode")]),
              _vm._v(": Create")
            ]),
            _vm._v(" "),
            _c("ul", [
              _c("li", [
                _vm._v(
                  "Reemplaza las tablas con EfiReservedMemoryType recientemente asignadas, usar "
                ),
                _c("code", [_vm._v("Custom")]),
                _vm._v(
                  " en las laptops Dell que requieren el quirk CustomSMBIOS"
                )
              ]),
              _vm._v(" "),
              _c("li", [
                _vm._v("Configurando esto a "),
                _c("code", [_vm._v("Custom")]),
                _vm._v(
                  " con el quirk CustomSMBIOSGuid habilitado también puede deshabilitar la inyección de SMBIOS en sistemas operativos que no son de Apple, aunque no recomendamos esto ya que rompe la compatibilildad con BootCamp. Úsalo bajo tu propio riesgo."
                )
              ])
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "uefi" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#uefi" } }, [
          _vm._v("#")
        ]),
        _vm._v(" UEFI")
      ]),
      _vm._v(" "),
      _c("p", [
        _c("img", {
          attrs: {
            src: require("../images/config/config-universal/aptio-iv-uefi.png"),
            alt: "UEFI"
          }
        })
      ]),
      _vm._v(" "),
      _c("p", [_c("strong", [_vm._v("ConnectDrivers")]), _vm._v(": YES")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Fuerza drivers "),
          _c("code", [_vm._v(".efi")]),
          _vm._v(". El cambio a "),
          _c("code", [_vm._v("NO")]),
          _vm._v(
            " conectará automáticamente los drivers UEFI agregados. Esto puede hacer que el arranque sea un poco más rápido, pero no todos los drivers se conectan. (ej. ciertos drivers del sistema pueden no cargarse)."
          )
        ])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "drivers" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#drivers" } }, [
          _vm._v("#")
        ]),
        _vm._v(" Drivers")
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("Agrega tus drivers .efi aquí")]),
      _vm._v(" "),
      _c("p", [_vm._v("Los únicos drivers presentes aquí deberían ser:")]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [_vm._v("HfsPlus.efi")]),
        _vm._v(" "),
        _c("li", [_vm._v("OpenRuntime.efi")])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "apfs" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#apfs" } }, [
          _vm._v("#")
        ]),
        _vm._v(" APFS")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Configuración relacionada con el driver de APFS. Deja todo aquí como predeterminado."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "audio" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#audio" } }, [
          _vm._v("#")
        ]),
        _vm._v(" Audio")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "En relación con la configuración de AudioDxe, por ahora ignoraremos esto (dejar como predeterminado). Esto no está relacionado con el soporte de audio en macOS."
        )
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "Para un más información sobre uso de AudioDxe y la sección Audio, consulta la página de post instalación: "
          ),
          _c(
            "a",
            {
              attrs: {
                href: "https://inyextciones.github.io/OpenCore-Post-Install/",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_vm._v("Agregar la GUI y el chime"), _c("OutboundLink")],
            1
          )
        ])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "input" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#input" } }, [
          _vm._v("#")
        ]),
        _vm._v(" Input")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "En relación con el paso de teclado con boot.efi, utilizado para la compatibilidad con FileVault y los Hotkeys, deja todo aquí como predeterminado ya que no tenemos uso para estos quirks. Ver aquí para más detalles: "
        ),
        _c(
          "a",
          {
            attrs: {
              href: "https://inyextciones.github.io/OpenCore-Post-Install/",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_vm._v("Seguridad y FileVault"), _c("OutboundLink")],
          1
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "output" } }, [
        _c("a", { staticClass: "header-anchor", attrs: { href: "#output" } }, [
          _vm._v("#")
        ]),
        _vm._v(" Output")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Relacionado a la salida visual de OpenCore, deja todo aquí como predeterminado, ya que no tenemos uso para estos quirks."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "protocoloverrides" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#protocoloverrides" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" ProtocolOverrides")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Principalmente relevante para máquinas virtuales, Macs Legacy y usuarios de FileVault. Consulta aquí para obtener más detalles: "
        ),
        _c(
          "a",
          {
            attrs: {
              href: "https://inyextciones.github.io/OpenCore-Post-Install/",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_vm._v("Seguridad y FileVault"), _c("OutboundLink")],
          1
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "quirks-4" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#quirks-4" } },
          [_vm._v("#")]
        ),
        _vm._v(" Quirks")
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "custom-block tip" }, [
        _c("p", { staticClass: "custom-block-title" }, [_vm._v("Info")]),
        _vm._v(" "),
        _c("p", [
          _vm._v(
            "En relación con los quirks con el entorno UEFI, cambiaremos lo siguiente:"
          )
        ]),
        _vm._v(" "),
        _c("table", [
          _c("thead", [
            _c("tr", [
              _c("th", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Quirk")
              ]),
              _vm._v(" "),
              _c("th", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Enabled")
              ]),
              _vm._v(" "),
              _c("th", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Comment")
              ])
            ])
          ]),
          _vm._v(" "),
          _c("tbody", [
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("UnblockFsConnect")
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("NO")
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Necesario principalmente para placas madre HP")
              ])
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("details", { staticClass: "custom-block details" }, [
        _c("summary", [_vm._v("Información más detallada")]),
        _vm._v(" "),
        _c("ul", [
          _c("li", [
            _c("p", [
              _c("strong", [_vm._v("DeduplicateBootOrder")]),
              _vm._v(": YES")
            ]),
            _vm._v(" "),
            _c("ul", [
              _c("li", [
                _vm._v(
                  "Solicita la reserva de algunas variables prefijadas de arranque de "
                ),
                _c("code", [_vm._v("OC_VENDOR_VARIABLE_GUID")]),
                _vm._v(" a "),
                _c("code", [_vm._v("EFI_GLOBAL_VARIABLE_GUID")]),
                _vm._v(". Se utiliza para arreglar las opciones de arranque.")
              ])
            ])
          ]),
          _vm._v(" "),
          _c("li", [
            _c("p", [
              _c("strong", [_vm._v("RequestBootVarRouting")]),
              _vm._v(": YES")
            ]),
            _vm._v(" "),
            _c("ul", [
              _c("li", [
                _vm._v("Redirige AptioMemoryFix desde "),
                _c("code", [_vm._v("EFI_GLOBAL_VARIABLE_GUID")]),
                _vm._v(" a "),
                _c("code", [_vm._v("OC_VENDOR_VARIABLE_GUID")]),
                _vm._v(
                  ". Necesario para cuando el firmware intenta eliminar las entradas de arranque y se recomienda que esté habilitado en todos los sistemas para la instalación correcta de las actualizaciones, el funcionamiento del panel de control del disco de inicio, etc."
                )
              ])
            ])
          ]),
          _vm._v(" "),
          _c("li", [
            _c("p", [
              _c("strong", [_vm._v("UnblockFsConnect")]),
              _vm._v(": NO")
            ]),
            _vm._v(" "),
            _c("ul", [
              _c("li", [
                _vm._v(
                  'Algunos firmwares bloquean a las llamadas "partition handles" abriéndolas en modo de controlador, lo que hace que los protocolos del sistema de archivos no puedan instalarse. Principalmente relevante para sistemas HP cuando no se ven discos enumerados'
                )
              ])
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "reservedmemory" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#reservedmemory" } },
          [_vm._v("#")]
        ),
        _vm._v(" ReservedMemory")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Se utiliza para eximir ciertas regiones de memoria de los sistemas operativos a utilizar, principalmente relevante para iGPUs o sistemas Sandy Bridge con memoria defectuosa. El uso de este quirk no está cubierto en esta guía"
        )
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "cleaning-up" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#cleaning-up" } },
          [_vm._v("#")]
        ),
        _vm._v(" Cleaning up")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Y ahora estás listo para guardar y colocarlo en tu EFI bajo EFI/OC."
        )
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _vm._v(
            "Para aquellos que tienen problemas de booteo, asegúrense de leer primero la "
          ),
          _c(
            "RouterLink",
            { attrs: { to: "/troubleshooting/troubleshooting.html" } },
            [_vm._v("Sección de solución de problemas")]
          ),
          _vm._v(
            " y si tus preguntas siguen sin respuesta, tenemos muchos recursos a tu disposición:"
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c("p", [
            _c(
              "a",
              {
                attrs: {
                  href: "https://www.reddit.com/r/hackintosh/",
                  target: "_blank",
                  rel: "noopener noreferrer"
                }
              },
              [_vm._v("Subreddit de Hackintosh"), _c("OutboundLink")],
              1
            )
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("p", [
            _c(
              "a",
              {
                attrs: {
                  href: "https://discord.gg/2QYd7ZT",
                  target: "_blank",
                  rel: "noopener noreferrer"
                }
              },
              [_vm._v("Nuestro servidor de Discord"), _c("OutboundLink")],
              1
            )
          ])
        ]),
        _vm._v(" "),
        _c("li", [
          _c("p", [
            _c("strong", [
              _vm._v(
                "NOTA IMPORTANTE: El Subreddit y el servidor de Discord sólo admiten posts en inglés, así que asegúrate de hacerlos en este idioma para evitar inconvenientes."
              )
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("p", [_c("strong", [_vm._v("Sanity check")]), _vm._v(":")]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Gracias a los esfuerzos de Ramus, también tenemos una herramienta increíble para ayudar a verificar su configuración para aquellos que pueden haberse perdido algo:"
        )
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _c(
            "a",
            {
              attrs: {
                href: "https://opencore.slowgeek.com",
                target: "_blank",
                rel: "noopener noreferrer"
              }
            },
            [_c("strong", [_vm._v("Sanity Checker")]), _c("OutboundLink")],
            1
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Ten en cuenta que esta herramienta no está hecha ni mantenida por Dortania, todos los problemas con este sitio deben enviarse aquí: "
        ),
        _c(
          "a",
          {
            attrs: {
              href: "https://github.com/rlerdorf/OCSanity",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [_vm._v("Repositorio del Sanity Checker"), _c("OutboundLink")],
          1
        )
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "configuracion-de-bios-de-intel" } }, [
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#configuracion-de-bios-de-intel" }
          },
          [_vm._v("#")]
        ),
        _vm._v(" Configuración de BIOS de Intel")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "Nota: La mayoría de las opciones pueden no llegar a estar presentes en tu firmware. Recomendamos que lo hagas coincidir lo más que puedas, pero no te preocupes demasiado si hay opciones que no están disponibles en tu BIOS."
          )
        ])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "deshabilitar" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#deshabilitar" } },
          [_vm._v("#")]
        ),
        _vm._v(" Deshabilitar")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [_vm._v("Fast Boot")]),
        _vm._v(" "),
        _c("li", [_vm._v("Secure Boot")]),
        _vm._v(" "),
        _c("li", [_vm._v("Serial/COM Port")]),
        _vm._v(" "),
        _c("li", [_vm._v("Parallel Port")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("VT-d (puede ser habilitado si "),
          _c("code", [_vm._v("DisableIoMapper")]),
          _vm._v(" está configurado a "),
          _c("code", [_vm._v("YES")]),
          _vm._v(")")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("CSM")]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Thunderbolt(Para la instalación inicial, ya que Thunderbolt puede causar problemas si no se configura correctamente)"
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Intel SGX")]),
        _vm._v(" "),
        _c("li", [_vm._v("Intel Platform Trust")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("CFG Lock (Protección contra escritura MSR 0xE2) ("),
          _c("strong", [
            _vm._v(
              "Esto debe estar desactivado, si no puedes encontrar la opción, habilita tanto "
            ),
            _c("code", [_vm._v("AppleCpuPmCfgLock")]),
            _vm._v(" como "),
            _c("code", [_vm._v("AppleXcpmCfgLock")]),
            _vm._v(
              " en Kernel -> Quirks. Tu hack no se iniciará con CFG-Lock habilitado"
            )
          ]),
          _vm._v(" )")
        ])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "habilitar" } }, [
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#habilitar" } },
          [_vm._v("#")]
        ),
        _vm._v(" Habilitar")
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [_vm._v("VT-x")]),
        _vm._v(" "),
        _c("li", [_vm._v("Above 4G decoding")]),
        _vm._v(" "),
        _c("li", [_vm._v("Hyper-Threading")]),
        _vm._v(" "),
        _c("li", [_vm._v("Execute Disable Bit")]),
        _vm._v(" "),
        _c("li", [_vm._v("EHCI/XHCI Hand-off")]),
        _vm._v(" "),
        _c("li", [_vm._v("OS type: Windows 8.1/10 UEFI Mode")]),
        _vm._v(" "),
        _c("li", [_vm._v("DVMT Pre-Allocated (memoria del iGPU): 64MB")]),
        _vm._v(" "),
        _c("li", [_vm._v("SATA Mode: AHCI")])
      ]),
      _vm._v(" "),
      _c(
        "h1",
        {
          attrs: {
            id: "ahora-con-todo-esto-hecho-dirigete-a-la-pagina-de-instalacion"
          }
        },
        [
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href:
                  "#ahora-con-todo-esto-hecho-dirigete-a-la-pagina-de-instalacion"
              }
            },
            [_vm._v("#")]
          ),
          _vm._v(" Ahora con todo esto hecho, dirígete a la "),
          _c("a", { attrs: { href: "/installation/installation-process" } }, [
            _vm._v("página de instalación")
          ])
        ]
      )
    ]
  )
}
var staticRenderFns = []
render._withStripped = true

export { render, staticRenderFns }"}]}