{"remainingRequest":"/Users/banana/Desktop/GIT/OpenCore-Install-Guide/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/banana/Desktop/GIT/OpenCore-Install-Guide/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/banana/Desktop/GIT/OpenCore-Install-Guide/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/banana/Desktop/GIT/OpenCore-Install-Guide/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/banana/Desktop/GIT/OpenCore-Install-Guide/troubleshooting/extended/opencore-issues.md?vue&type=template&id=15246212&","dependencies":[{"path":"/Users/banana/Desktop/GIT/OpenCore-Install-Guide/troubleshooting/extended/opencore-issues.md","mtime":1603146024451},{"path":"/Users/banana/Desktop/GIT/OpenCore-Install-Guide/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/banana/Desktop/GIT/OpenCore-Install-Guide/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/banana/Desktop/GIT/OpenCore-Install-Guide/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/banana/Desktop/GIT/OpenCore-Install-Guide/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/banana/Desktop/GIT/OpenCore-Install-Guide/node_modules/@vuepress/markdown-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgIkNvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yIiwKICAgIHsgYXR0cnM6IHsgInNsb3Qta2V5IjogX3ZtLiRwYXJlbnQuc2xvdEtleSB9IH0sCiAgICBbCiAgICAgIF9jKCJoMSIsIHsgYXR0cnM6IHsgaWQ6ICJwcm9ibGVtYXMtY29uLW9wZW5jb3JlIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNwcm9ibGVtYXMtY29uLW9wZW5jb3JlIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgUHJvYmxlbWFzIGNvbiBPcGVuQ29yZSIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFtfYygicCIsIFtfdm0uX3YoIlZlcnNpw7NuIHNvcG9ydGFkYTogMC42LjIiKV0pXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF9jKCJhIiwgeyBhdHRyczogeyBocmVmOiAiI3RyYW5jYWRvLWVuLW5vLXZhdWx0LXByb3ZpZGVkIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIlRyYW5jYWRvIGVuICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigibm8gdmF1bHQgcHJvdmlkZWQhIildKQogICAgICAgICAgICBdKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX2MoImEiLCB7IGF0dHJzOiB7IGhyZWY6ICIjdHJhbmNhZG8tZW4tb2MtaW52YWxpZC12YXVsdC1tb2RlIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIlRyYW5jYWRvIGVuICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiT0M6IEludmFsaWQgVmF1bHQgbW9kZSIpXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICBocmVmOgogICAgICAgICAgICAgICAgICAgICIjdHJhbmNhZG8tZW4tb2NiLW9jc2NhbmZvcmJvb3RlbnRyaWVzLWZhaWx1cmUtLS1ub3QtZm91bmQiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIlRyYW5jYWRvIGVuICIpLAogICAgICAgICAgICAgICAgX2MoImNvZGUiLCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigiT0NCOiBPY1NjYW5Gb3JCb290RW50cmllcyBmYWlsdXJlIC0gTm90IEZvdW5kIikKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXQogICAgICAgICAgICApCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgaHJlZjogIiN0cmFuY2Fkby1lbi1vY2ItZmFpbGVkLXRvLW1hdGNoLWEtZGVmYXVsdC1ib290LW9wdGlvbiIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF92bS5fdigiVHJhbmNhZG8gZW4gIiksCiAgICAgICAgICAgICAgICBfYygiY29kZSIsIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KCJPQ0I6IGZhaWxlZCB0byBtYXRjaCBhIGRlZmF1bHQgYm9vdCBvcHRpb24iKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdCiAgICAgICAgICAgICkKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICBocmVmOgogICAgICAgICAgICAgICAgICAgICIjdHJhbmNhZG8tZW4tb2NzLW5vLXNjaGVtYS1mb3ItZHNkdC1rZXJuZWxhbmRrZXh0cGF0Y2gtcnR2YXJpYWJsZS1zbWJpb3Mtc3lzdGVtcGFyYW1ldGVycyIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF92bS5fdigiVHJhbmNhZG8gZW4gIiksCiAgICAgICAgICAgICAgICBfYygiY29kZSIsIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICJPQ1M6IE5vIHNjaGVtYSBmb3IgRFNEVCwgS2VybmVsQW5kS2V4dFBhdGNoLCBSdFZhcmlhYmxlLCBTTUJJT1MsIFN5c3RlbVBhcmFtZXRlcnMuLi4iCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXQogICAgICAgICAgICApCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgaHJlZjogIiN0cmFuY2Fkby1lbi1vYy1kcml2ZXIteHh4ZWZpLWF0LTAtY2Fubm90LWJlLWZvdW5kIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX3ZtLl92KCJUcmFuY2FkbyBlbiAiKSwKICAgICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiT0M6IERyaXZlciBYWFguZWZpIGF0IDAgY2Fubm90IGJlIGZvdW5kIildKQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIGhyZWY6ICIjcmVjaWJpZW5kby1mYWlsZWQtdG8tcGFyc2UtcmVhbC1maWVsZC1vZi10eXBlLTEiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIlJlY2liaWVuZG8gIiksCiAgICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIkZhaWxlZCB0byBwYXJzZSByZWFsIGZpZWxkIG9mIHR5cGUgMSIpXSkKICAgICAgICAgICAgICBdCiAgICAgICAgICAgICkKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICBocmVmOiAiI25vLXB1ZWRvLXNlbGVjY2lvbmFyLW5hZGEtZW4tZWwtbWVudS1kZS1vcGVuY29yZSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFtfdm0uX3YoIk5vIHB1ZWRvIHNlbGVjY2lvbmFyIG5hZGEgZW4gZWwgbWVuw7ogZGUgT3BlbkNvcmUiKV0KICAgICAgICAgICAgKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX2MoImEiLCB7IGF0dHJzOiB7IGhyZWY6ICIjc3NkdHMtbm8tc2llbmRvLWFncmVnYWRvcyIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJTU0RUcyBubyBzaWVuZG8gYWdyZWdhZG9zIikKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICB7IGF0dHJzOiB7IGhyZWY6ICIjYm9vdGVhci1vcGVuY29yZS1yZWluaWNpYS1hLWxhLWJpb3MiIH0gfSwKICAgICAgICAgICAgICBbX3ZtLl92KCJCb290ZWFyIG9wZW5jb3JlIHJlaW5pY2lhIGEgbGEgQklPUyIpXQogICAgICAgICAgICApCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgaHJlZjogIiNvY2FiYy1pbmNvbXBhdGlibGUtb3BlbnJ1bnRpbWUtcjQtcmVxdWlyZS1yMTAiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbX3ZtLl92KCJPQ0FCQzogSW5jb21wYXRpYmxlIE9wZW5SdW50aW1lIHI0LCByZXF1aXJlIHIxMCIpXQogICAgICAgICAgICApCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogInRyYW5jYWRvLWVuLW5vLXZhdWx0LXByb3ZpZGVkIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiN0cmFuY2Fkby1lbi1uby12YXVsdC1wcm92aWRlZCIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFRyYW5jYWRvIGVuICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigibm8gdmF1bHQgcHJvdmlkZWQhIildKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiQXBhZ2EgZWwgdmF1bHRpbmcgZW4gdHUgY29uZmlnLnBsaXN0IGRlYmFqbyBkZSAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIk1pc2MgLT4gU2VjdXJpdHkgLT4gVmF1bHQiKV0pLAogICAgICAgIF92bS5fdigiLCBkZWJlcyBjb25maWd1cmFybG8gYToiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFtfYygibGkiLCBbX2MoImNvZGUiLCBbX3ZtLl92KCJPcHRpb25hbCIpXSldKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJTaSB5YSBoYXMgZWplY3V0YWRvIGVsICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigic2lnbi5jb21tYW5kIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiLCBkZWJlcsOhcyByZXN0YXVyYXIgZWwgYXJjaGl2byBPcGVuQ29yZS5lZmkgeWEgcXVlIHNlIGhhIGludHJvZHVjaWRvIGxhIGZpcm1hIFJTQS0yMDQ4IGRlIDI1NiBieXRlcy4gUHVlZGVzIG9idGVuZXIgdW5hIG51ZXZhIGNvcGlhIGRlIE9wZW5Db3JlLmVmaSBhcXXDrTogIgogICAgICAgICksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vZ2l0aHViLmNvbS9hY2lkYW50aGVyYS9PcGVuQ29yZVBrZy9yZWxlYXNlcyIsCiAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiT3BlbkNvcmVQa2ciKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgIDEKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIk5vdGEiKV0pLAogICAgICAgIF92bS5fdigiOiBWYXVsdCB5IEZpbGVWYXVsdCBzb24gMiBjb3NhcyBkaXN0aW50YXMsIGNvbnN1bHRhICIpLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIGhyZWY6CiAgICAgICAgICAgICAgICAiaHR0cHM6Ly9kb3J0YW5pYS5naXRodWIuaW8vT3BlbkNvcmUtUG9zdC1JbnN0YWxsL3VuaXZlcnNhbC9zZWN1cml0eS5odG1sIiwKICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCJTZWd1cmlkYWQgeSBGaWxlVmF1bHQiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF92bS5fdigiIHBhcmEgb2J0ZW5lciBtw6FzIGRldGFsbGVzLiIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogInRyYW5jYWRvLWVuLW9jLWludmFsaWQtdmF1bHQtbW9kZSIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjdHJhbmNhZG8tZW4tb2MtaW52YWxpZC12YXVsdC1tb2RlIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgVHJhbmNhZG8gZW4gIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJPQzogSW52YWxpZCBWYXVsdCBtb2RlIildKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJFcyBwcm9iYWJsZSBxdWUgc2VhIHVuIGVycm9yIG9ydG9ncsOhZmljbywgbGFzIG9wY2lvbmVzIGVuIE9wZW5Db3JlIGRpc3Rpbmd1ZW4gZW50cmUgbWF5w7pzY3VsYXMgeSBtaW7DunNjdWxhcywgYXPDrSBxdWUgYXNlZ8O6cmF0ZSBkZSB2ZXJpZmljYXIgZGV0ZW5pZGFtZW50ZSwgIgogICAgICAgICksCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIk8iKV0pLAogICAgICAgIF92bS5fdigicHRpb25hbCBlcyBsYSBmb3JtYSBjb3JyZWN0YSBkZSBpbmdyZXNhcmxvIGVuICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiTWlzYyAtPiBTZWN1cml0eSAtPiBWYXVsdCIpXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygKICAgICAgICAiaDIiLAogICAgICAgIHsKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgIGlkOiAidHJhbmNhZG8tZW4tb2NiLW9jc2NhbmZvcmJvb3RlbnRyaWVzLWZhaWx1cmUtbm90LWZvdW5kIgogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6ICIjdHJhbmNhZG8tZW4tb2NiLW9jc2NhbmZvcmJvb3RlbnRyaWVzLWZhaWx1cmUtbm90LWZvdW5kIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigiIFRyYW5jYWRvIGVuICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJPQ0I6IE9jU2NhbkZvckJvb3RFbnRyaWVzIGZhaWx1cmUgLSBOb3QgRm91bmQiKV0pCiAgICAgICAgXQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkVzdG8gZXMgZGViaWRvIGEgcXVlIE9wZW5Db3JlIG5vIHB1ZWRlIGVuY29udHJhciBuaW5nw7puIGRpc2NvIGNvbiB0dSBTY2FuUG9saWN5IGFjdHVhbCwgY29uZmlndXLDoW5kb2xvIGEgIgogICAgICAgICksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCIwIildKSwKICAgICAgICBfdm0uX3YoIiBwZXJtaXRlIHF1ZSBzZSBtdWVzdHJlbiB0b2RhcyBsYXMgb3BjaW9uZXMgZGUgYXJyYW5xdWUiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbX2MoImNvZGUiLCBbX3ZtLl92KCJNaXNjIC0+IFNlY3VyaXR5IC0+IFNjYW5Qb2xpY3kgLT4gMCIpXSldKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJoMiIsCiAgICAgICAgewogICAgICAgICAgYXR0cnM6IHsgaWQ6ICJ0cmFuY2Fkby1lbi1vY2ItZmFpbGVkLXRvLW1hdGNoLWEtZGVmYXVsdC1ib290LW9wdGlvbiIgfQogICAgICAgIH0sCiAgICAgICAgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6ICIjdHJhbmNhZG8tZW4tb2NiLWZhaWxlZC10by1tYXRjaC1hLWRlZmF1bHQtYm9vdC1vcHRpb24iCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KCIgVHJhbmNhZG8gZW4gIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIk9DQjogZmFpbGVkIHRvIG1hdGNoIGEgZGVmYXVsdCBib290IG9wdGlvbiIpXSkKICAgICAgICBdCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIkVsIG1pc21vIGFycmVnbG8gcXVlICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiT0NCOiBPY1NjYW5Gb3JCb290RW50cmllcyBmYWlsdXJlIC0gTm90IEZvdW5kIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiLCBPcGVuQ29yZSBubyBwdWVkZSBlbmNvbnRyYXIgbmluZ8O6biBkaXNjbyBjb24gZWwgU2NhblBvbGljeSBhY3R1YWwsIGxhIGNvbmZpZ3VyYWNpw7NuIGEiCiAgICAgICAgKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIjAiKV0pLAogICAgICAgIF92bS5fdigiIHBlcm1pdGlyw6EgbW9zdHJhciB0b2RhcyBsYXMgb3BjaW9uZXMgZGUgYXJyYW5xdWUiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbX2MoImNvZGUiLCBbX3ZtLl92KCJNaXNjIC0+IFNlY3VyaXR5IC0+IFNjYW5Qb2xpY3kgLT4gMCIpXSldKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJoMiIsCiAgICAgICAgewogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgaWQ6CiAgICAgICAgICAgICAgInRyYW5jYWRvLWVuLW9jcy1uby1zY2hlbWEtZm9yLWRzZHQta2VybmVsYW5ka2V4dHBhdGNoLXJ0dmFyaWFibGUtc21iaW9zLXN5c3RlbXBhcmFtZXRlcnMiCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICAgIiN0cmFuY2Fkby1lbi1vY3Mtbm8tc2NoZW1hLWZvci1kc2R0LWtlcm5lbGFuZGtleHRwYXRjaC1ydHZhcmlhYmxlLXNtYmlvcy1zeXN0ZW1wYXJhbWV0ZXJzIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigiIFRyYW5jYWRvIGVuICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiT0NTOiBObyBzY2hlbWEgZm9yIERTRFQsIEtlcm5lbEFuZEtleHRQYXRjaCwgUnRWYXJpYWJsZSwgU01CSU9TLCBTeXN0ZW1QYXJhbWV0ZXJzLi4uIgogICAgICAgICAgICApCiAgICAgICAgICBdKQogICAgICAgIF0KICAgICAgKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJFc3RvIGVzIGRlYmlkbyBhIHF1ZSwgbyBlc3TDoXMgdXNhbmRvIHVuIGNvbmZpZyBkZSBDbG92ZXIgbyBlc3TDoXMgdXNhbmRvIHVuIGNvbmZpZ3VyYWRvciBjb21vIE9wZW5Db3JlIHkgQ2xvdmVyIGNvbmZpZ3VyYXRvciBkZSBNYWNraWUuIE5lY2VzaXRhcsOhcyBjb21lbnphciBkZSBudWV2byB5IGhhY2VyIHVuIGNvbmZpZyBudWV2byBvIGludGVudGFyIGRhcnRlIGN1ZW50YSB0b2RhIGxhIGJhc3VyYSBxdWUgdGllbmVzIHF1ZSBlbGltaW5hciBkZSB0dSBjb25maWcuICIKICAgICAgICApLAogICAgICAgIF9jKCJzdHJvbmciLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJFc3RvIGVzIHBvciBsbyBxdWUgbm8gc29wb3J0YW1vcyBjb25maWd1cmFkb3Jlcywgc29uIGNvbm9jaWRvcyBwb3IgZXN0b3MgZXJyb3JlcyIKICAgICAgICAgICkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJoMiIsCiAgICAgICAgeyBhdHRyczogeyBpZDogInRyYW5jYWRvLWVuLW9jLWRyaXZlci14eHgtZWZpLWF0LTAtY2Fubm90LWJlLWZvdW5kIiB9IH0sCiAgICAgICAgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6ICIjdHJhbmNhZG8tZW4tb2MtZHJpdmVyLXh4eC1lZmktYXQtMC1jYW5ub3QtYmUtZm91bmQiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KCIgVHJhbmNhZG8gZW4gIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIk9DOiBEcml2ZXIgWFhYLmVmaSBhdCAwIGNhbm5vdCBiZSBmb3VuZCIpXSkKICAgICAgICBdCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVmVyaWZpY2EgcXVlIGxvIHF1ZSB0aWVuZXMgZW4gRUZJL09DL0RyaXZlcnMgdGFtYmnDqW4gZXN0w6EgZW4gdHUgY29uZmlnLnBsaXN0IC0+IFVFRkkgLT4gRHJpdmVycy4gRXN0byBkZWJlcsOtYSBzZXIgcmVzdWVsdG8gY29ycmllbmRvIGxhIGZ1bmNpw7NuIHNuYXBzaG90IGRlIFByb3BlclRyZWUgZGUgbnVldm8uIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVGVuIGVuIGN1ZW50YSBxdWUgbGFzIGVudHJhZGFzIGRpc3Rpbmd1ZW4gZW50cmUgbWF5w7pzY3VsYXMgeSBtaW7DunNjdWxhcyIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgImgyIiwKICAgICAgICB7IGF0dHJzOiB7IGlkOiAicmVjaWJpZW5kby1mYWlsZWQtdG8tcGFyc2UtcmVhbC1maWVsZC1vZi10eXBlLTEiIH0gfSwKICAgICAgICBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjogIiNyZWNpYmllbmRvLWZhaWxlZC10by1wYXJzZS1yZWFsLWZpZWxkLW9mLXR5cGUtMSIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoJyBSZWNpYmllbmRvICJGYWlsZWQgdG8gcGFyc2UgcmVhbCBmaWVsZCBvZiB0eXBlIDEiJykKICAgICAgICBdCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJVbiB2YWxvciBxdWUgZnVlIGNvbmZpZ3VyYWRvIGEgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInJlYWwiKV0pLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiIGN1YW5kbyBubyBkZWJlcsOtYSBzZXJsbywgZXN0byBnZW5lcmFsbWVudGUgZXMgY3VhbmRvIFhjb2RlIGNvbnZpZXJ0ZSAgIgogICAgICAgICAgKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiSGFsdExldmVsIildKSwKICAgICAgICAgIF92bS5fdigiIHBvciBhY2NpZGVudGU6IikKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibGFuZ3VhZ2UteG1sIGV4dHJhLWNsYXNzIiB9LCBbCiAgICAgICAgX2MoInByZSIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogImxhbmd1YWdlLXhtbCIgfSB9LCBbCiAgICAgICAgICBfYygiY29kZSIsIFsKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiB0YWciIH0gfSwgWwogICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gdGFnIiB9IH0sIFsKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAic3BhbiIsCiAgICAgICAgICAgICAgICAgIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIHB1bmN0dWF0aW9uIiB9IH0sCiAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIjwiKV0KICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfdm0uX3YoImtleSIpCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBwdW5jdHVhdGlvbiIgfSB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIj4iKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIkhhbHRMZXZlbCIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIHRhZyIgfSB9LCBbCiAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiB0YWciIH0gfSwgWwogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJzcGFuIiwKICAgICAgICAgICAgICAgICAgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gcHVuY3R1YXRpb24iIH0gfSwKICAgICAgICAgICAgICAgICAgW192bS5fdigiPC8iKV0KICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfdm0uX3YoImtleSIpCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBwdW5jdHVhdGlvbiIgfSB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIj4iKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIlxuICIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIHRhZyIgfSB9LCBbCiAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiB0YWciIH0gfSwgWwogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJzcGFuIiwKICAgICAgICAgICAgICAgICAgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gcHVuY3R1YXRpb24iIH0gfSwKICAgICAgICAgICAgICAgICAgW192bS5fdigiPCIpXQogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF92bS5fdigicmVhbCIpCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBwdW5jdHVhdGlvbiIgfSB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIj4iKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIjIxNDc0ODM2NDgiKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiB0YWciIH0gfSwgWwogICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gdGFnIiB9IH0sIFsKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAic3BhbiIsCiAgICAgICAgICAgICAgICAgIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIHB1bmN0dWF0aW9uIiB9IH0sCiAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIjwvIildCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgX3ZtLl92KCJyZWFsIikKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIHB1bmN0dWF0aW9uIiB9IH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiPiIpCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiXG4iKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJQYXJhIGFycmVnbGFyIGVzdG8sIGNhbWJpYSAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInJlYWwiKV0pLAogICAgICAgIF92bS5fdigiIHBvciAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImludGVnZXIiKV0pLAogICAgICAgIF92bS5fdigiOiIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsYW5ndWFnZS14bWwgZXh0cmEtY2xhc3MiIH0sIFsKICAgICAgICBfYygicHJlIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAibGFuZ3VhZ2UteG1sIiB9IH0sIFsKICAgICAgICAgIF9jKCJjb2RlIiwgWwogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIHRhZyIgfSB9LCBbCiAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiB0YWciIH0gfSwgWwogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJzcGFuIiwKICAgICAgICAgICAgICAgICAgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gcHVuY3R1YXRpb24iIH0gfSwKICAgICAgICAgICAgICAgICAgW192bS5fdigiPCIpXQogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF92bS5fdigia2V5IikKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIHB1bmN0dWF0aW9uIiB9IH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiPiIpCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiSGFsdExldmVsIiksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gdGFnIiB9IH0sIFsKICAgICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIHRhZyIgfSB9LCBbCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgInNwYW4iLAogICAgICAgICAgICAgICAgICB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBwdW5jdHVhdGlvbiIgfSB9LAogICAgICAgICAgICAgICAgICBbX3ZtLl92KCI8LyIpXQogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF92bS5fdigia2V5IikKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIHB1bmN0dWF0aW9uIiB9IH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiPiIpCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiXG4gIiksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gdGFnIiB9IH0sIFsKICAgICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIHRhZyIgfSB9LCBbCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgInNwYW4iLAogICAgICAgICAgICAgICAgICB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiBwdW5jdHVhdGlvbiIgfSB9LAogICAgICAgICAgICAgICAgICBbX3ZtLl92KCI8IildCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgX3ZtLl92KCJpbnRlZ2VyIikKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIHB1bmN0dWF0aW9uIiB9IH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiPiIpCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiMjE0NzQ4MzY0OCIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogInRva2VuIHRhZyIgfSB9LCBbCiAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJ0b2tlbiB0YWciIH0gfSwgWwogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJzcGFuIiwKICAgICAgICAgICAgICAgICAgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gcHVuY3R1YXRpb24iIH0gfSwKICAgICAgICAgICAgICAgICAgW192bS5fdigiPC8iKV0KICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfdm0uX3YoImludGVnZXIiKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAidG9rZW4gcHVuY3R1YXRpb24iIH0gfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCI+IikKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCJcbiIpCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIlBhcmEgYXJyZWdsYXIgZXN0bywgY2FtYmlhICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigicmVhbCIpXSksCiAgICAgICAgX3ZtLl92KCIgcG9yICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiaW50ZWdlciIpXSksCiAgICAgICAgX3ZtLl92KCI6IikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygKICAgICAgICAiaDIiLAogICAgICAgIHsgYXR0cnM6IHsgaWQ6ICJuby1wdWVkby1zZWxlY2Npb25hci1uYWRhLWVuLWVsLW1lbnUtZGUtb3BlbmNvcmUiIH0gfSwKICAgICAgICBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjogIiNuby1wdWVkby1zZWxlY2Npb25hci1uYWRhLWVuLWVsLW1lbnUtZGUtb3BlbmNvcmUiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KCIgTm8gcHVlZG8gc2VsZWNjaW9uYXIgbmFkYSBlbiBlbCBtZW7DuiBkZSBPcGVuQ29yZSIpCiAgICAgICAgXQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiRGVzaGFiaWxpdGEgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIlBvbGxBcHBsZUhvdEtleXMiKV0pLAogICAgICAgICAgX3ZtLl92KCIgeSBoYWJpbGl0YSAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiS2V5U3VwcG9ydCIpXSksCiAgICAgICAgICBfdm0uX3YoIiwgbHVlZ28gZWxpbWluYSAiKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vZ2l0aHViLmNvbS9hY2lkYW50aGVyYS9PcGVuQ29yZVBrZy9yZWxlYXNlcyIsCiAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIk9wZW5Vc2JLYkR4ZSIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KCIgZGUgdHUgY29uZmlnLnBsaXN0IC0+IFVFRkkgLT4gRHJpdmVyc1xuIiksCiAgICAgICAgICBfYygidWwiLCBbCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiU2kgbG8gYW50ZXJpb3Igbm8gZnVuY2lvbmEsIGhheiBsbyBjb250cmFyaW86IGRlc2hhYmlsaXRhICIKICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiS2V5U3VwcG9ydCIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIsIGx1ZWdvIGFncmVnYSAiKSwKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9naXRodWIuY29tL2FjaWRhbnRoZXJhL09wZW5Db3JlUGtnL3JlbGVhc2VzIiwKICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbX3ZtLl92KCJPcGVuVXNiS2JEeGUiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF92bS5fdigiIGEgdHUgY29uZmlnLnBsaXN0IC0+IFVFRkkgLT4gRHJpdmVycyIpCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogInNzZHRzLW5vLXNpZW5kby1hZ3JlZ2Fkb3MiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI3NzZHRzLW5vLXNpZW5kby1hZ3JlZ2Fkb3MiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBTU0RUcyBubyBzaWVuZG8gYWdyZWdhZG9zIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiQ29uIE9wZW5Db3JlLCBoYXkgYWxndW5hcyBjb21wcm9iYWNpb25lcyBkZSBzZWd1cmlkYWQgYWRpY2lvbmFsZXMgYWdyZWdhZGFzIGFscmVkZWRvciBkZSBsb3MgYXJjaGl2b3MgQUNQSSwgZXNwZWPDrWZpY2FtZW50ZSBxdWUgZWwgZW5jYWJlemFkbyBkZSBsYSBsb25naXR1ZCBkZSBsYSB0YWJsYSBkZWJlIHNlciBpZ3VhbCBhbCB0YW1hw7FvIGRlbCBhcmNoaXZvLiBFc3RvIGVzIGN1bHBhIGRlIGlBU0wgY3VhbmRvIGNvbXBpbMOzIGVsIGFyY2hpdm8uIEVqZW1wbG8gZGUgY8OzbW8gZW5jb250cmFybG86IgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImxhbmd1YWdlLSBleHRyYS1jbGFzcyIgfSwgWwogICAgICAgIF9jKCJwcmUiLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJsYW5ndWFnZS10ZXh0IiB9IH0sIFsKICAgICAgICAgIF9jKCJjb2RlIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgJyogT3JpZ2luYWwgVGFibGUgSGVhZGVyOlxuKiAgICAgU2lnbmF0dXJlICAgICAgICAiU1NEVCJcbiogICAgIExlbmd0aCAgICAgICAgICAgMHgwMDAwMDE1RCAoMzQ5KVxuKiAgICAgUmV2aXNpb24gICAgICAgICAweDAyXG4qICAgICBDaGVja3N1bSAgICAgICAgIDB4Q0ZcbiogICAgIE9FTSBJRCAgICAgICAgICAgIkFDRFQiXG4qICAgICBPRU0gVGFibGUgSUQgICAgICJTc2R0RUMiXG4qICAgICBPRU0gUmV2aXNpb24gICAgIDB4MDAwMDEwMDAgKDQwOTYpXG4qICAgICBDb21waWxlciBJRCAgICAgICJJTlRMIlxuKiAgICAgQ29tcGlsZXIgVmVyc2lvbiAweDIwMTkwNTA5ICg1Mzg1MTA2MDEpXG4nCiAgICAgICAgICAgICkKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiRWwgdmFsb3IgZGUgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJMZW5ndGgiKV0pLAogICAgICAgIF92bS5fdigiIHkgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJjaGVja3N1bSIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBlcyBsbyBxdWUgbm9zIGltcG9ydGEsIHBvciBsbyBxdWUgc2kgbnVlc3RybyBTU0RUIGVzIGRlIDM0NyBieXRlcywgZW50b25jZXMgcXVlcmVtb3MgY2FtYmlhciAiCiAgICAgICAgKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIkxlbmd0aCIpXSksCiAgICAgICAgX3ZtLl92KCIgYSAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIjB4MDAwMDAxNUIgKDM0NykiKV0pLAogICAgICAgIF92bS5fdigiKGVsICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiMDE1QiIpXSksCiAgICAgICAgX3ZtLl92KCIgZXN0w6EgZW4gSEVYKSIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkxhIG1lam9yIG1hbmVyYSBkZSBhcnJlZ2xhciBlc3RvIGVzIHRvbWFyIHVuYSBjb3BpYSBtw6FzIHJlY2llbnRlIGRlIGlBU0wgbyBsYSBjb3BpYSBkZSBBY2lkYW50aGVyYSBkZSAiCiAgICAgICAgKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9naXRodWIuY29tL2FjaWRhbnRoZXJhL01hY2lBU0wvcmVsZWFzZXMiLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIk1hY2lBU0wiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF92bS5fdigiIHkgcmVoYWNlciBlbCBTU0RUIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiYXJyYW5jYW5kby1vcGVuY29yZS1yZWluaWNpYS1hLWxhLWJpb3MiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2FycmFuY2FuZG8tb3BlbmNvcmUtcmVpbmljaWEtYS1sYS1iaW9zIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgQXJyYW5jYW5kbyBPcGVuQ29yZSByZWluaWNpYSBhIGxhIEJJT1MiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJFc3RydWN0dXJhIGRlIGNhcnBldGFzIEVGSSBpbmNvcnJlY3RhLCBhc2Vnw7pyYXRlIGRlIHF1ZSB0b2RvcyB0dXMgYXJjaGl2b3MgT0MgZXN0w6luIGRlbnRybyBkZSB1bmEgY2FycGV0YSBFRkkgdWJpY2FkYSBlbiBzdSBFU1AgKHBhcnRpY2nDs24gZGVsIHNpc3RlbWEgRUZJKSIKICAgICAgICAgICkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY3VzdG9tLWJsb2NrIHRpcCIgfSwgWwogICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogImN1c3RvbS1ibG9jay10aXRsZSIgfSwgWwogICAgICAgICAgX3ZtLl92KCJFamVtcGxvIGRlIGVzdHJ1Y3R1cmEgZGUgbGEgY2FycGV0YSIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi4vLi4vaW1hZ2VzL3Ryb3VibGVzaG9vdGluZy90cm91Ymxlc2hvb3RpbmctbWQvb2Mtc3RydWN0dXJlLnBuZyIpLAogICAgICAgICAgICAgIGFsdDoKICAgICAgICAgICAgICAgICJFc3RydWN0dXJhIGRlbCBkaXJlY3RvcmlvIGRlIE9wZW5Db3JlIGV4dHJhaWRhIGRlIHN1IGRvY3VtZW50YWNpw7NuIgogICAgICAgICAgICB9CiAgICAgICAgICB9KQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgImgyIiwKICAgICAgICB7IGF0dHJzOiB7IGlkOiAib2NhYmMtaW5jb21wYXRpYmxlLW9wZW5ydW50aW1lLXI0LXJlcXVpcmUtcjEwIiB9IH0sCiAgICAgICAgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNvY2FiYy1pbmNvbXBhdGlibGUtb3BlbnJ1bnRpbWUtcjQtcmVxdWlyZS1yMTAiIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigiIE9DQUJDOiBJbmNvbXBhdGlibGUgT3BlblJ1bnRpbWUgcjQsIHJlcXVpcmUgcjEwIikKICAgICAgICBdCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiT3BlblJ1bnRpbWUuZWZpIGRlc2FjdHVhbGl6YWRvLCBhc2Vnw7pyYXRlIGRlIHF1ZSBCT09UeDY0LmVmaSwgT3BlbkNvcmUuZWZpIHkgT3BlblJ1bnRpbWUgc29uICIKICAgICAgICApLAogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJ0b2RvcyBkZSBsYSBtaXNtYSB2ZXJzacOzbiIpXSksCiAgICAgICAgX3ZtLl92KCIuIEN1YWxxdWllciBjb3NhIHF1ZSBubyBjb2luY2lkYSBpbnRlcnJ1bXBpcsOhIGVsIGFycmFucXVlIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIk5vdGEiKV0pLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiOiBGd1J1bnRpbWVTZXJ2aWNlcyBoYSBjYW1iaWFkbyBzdSBub21icmUgYSBPcGVuUnVudGltZSBjb24gMC41LjcgeSBtw6FzIHJlY2llbnRlIgogICAgICAgICAgKQogICAgICAgIF0pCiAgICAgIF0pCiAgICBdCiAgKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXQpyZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWUKCmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0="}]}