{"remainingRequest":"/Users/banana/Desktop/GIT/OpenCore-Install-Guide/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/banana/Desktop/GIT/OpenCore-Install-Guide/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/banana/Desktop/GIT/OpenCore-Install-Guide/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/banana/Desktop/GIT/OpenCore-Install-Guide/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/banana/Desktop/GIT/OpenCore-Install-Guide/extras/msr-lock.md?vue&type=template&id=85e3ae7a&","dependencies":[{"path":"/Users/banana/Desktop/GIT/OpenCore-Install-Guide/extras/msr-lock.md","mtime":1603146013342},{"path":"/Users/banana/Desktop/GIT/OpenCore-Install-Guide/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/banana/Desktop/GIT/OpenCore-Install-Guide/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/banana/Desktop/GIT/OpenCore-Install-Guide/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/banana/Desktop/GIT/OpenCore-Install-Guide/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/banana/Desktop/GIT/OpenCore-Install-Guide/node_modules/@vuepress/markdown-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgIkNvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yIiwKICAgIHsgYXR0cnM6IHsgInNsb3Qta2V5IjogX3ZtLiRwYXJlbnQuc2xvdEtleSB9IH0sCiAgICBbCiAgICAgIF9jKCJoMSIsIHsgYXR0cnM6IHsgaWQ6ICJmaXhpbmctY2ZnLWxvY2siIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2ZpeGluZy1jZmctbG9jayIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgRml4aW5nIENGRyBMb2NrIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbX2MoImxpIiwgW192bS5fdigiU3VwcG9ydGVkIHZlcnNpb246IDAuNS45IildKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX2MoImV4dG9jIildLCAxKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJEbyBub3RlIHRoYXQgdGhpcyBpcyBvbmx5IHJlY29tbWVuZGVkIGZvciB1c2VycyB3aG8gaGF2ZSBhbHJlYWR5IGluc3RhbGxlZCBtYWNPUywgZm9yIHVzZXJzIHdobyBhcmUgaW5zdGFsbGluZyBmb3IgdGhlIGZpcnN0IHRpbWUgZW5hYmxlICIKICAgICAgICApLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiQXBwbGVDcHVQbUNmZ0xvY2siKV0pLAogICAgICAgIF92bS5fdigiIGFuZCAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIkFwcGxlWGNwbUNmZ0xvY2siKV0pLAogICAgICAgIF92bS5fdigiIHVuZGVyICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiS2VybmVsIC0+IFF1aXJrcyIpXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAid2hhdC1pcy1jZmctbG9jayIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjd2hhdC1pcy1jZmctbG9jayIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFdoYXQgaXMgQ0ZHLUxvY2siKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJDRkctTG9jayBpcyBhIHNldHRpbmcgaW4geW91ciBCSU9TIHRoYXQgYWxsb3dzIGZvciBhIHNwZWNpZmljIHJlZ2lzdGVyKGluIHRoaXMgY2FzZSB0aGUgTVNSIDB4RTIpIHRvIGJlIHdyaXR0ZW4gdG8uIEJ5IGRlZmF1bHQsIG1vc3QgbW90aGVyYm9hcmRzIGxvY2sgdGhpcyB2YXJpYWJsZSB3aXRoIG1hbnkgZXZlbiBoaWRpbmcgdGhlIG9wdGlvbiBvdXRyaWdodCBpbiB0aGUgR1VJLiBBbmQgd2h5IHdlIGNhcmUgYWJvdXQgaXQgaXMgdGhhdCBtYWNPUyBhY3R1YWxseSB3YW50cyB0byB3cml0ZSB0byB0aGlzIHZhcmlhYmxlLCBhbmQgbm90IGp1c3Qgb25lIHBhcnQgb2YgbWFjT1MuIEluc3RlYWQgYm90aCB0aGUgS2VybmVsKFhOVSkgYW5kIEFwcGxlSW50ZWxQb3dlck1hbmFnZW1lbnQgd2FudCB0aGlzIHJlZ2lzdGVyLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX3ZtLl92KCJTbyB0byBmaXggaXQgd2UgaGF2ZSAyIG9wdGlvbnM6IildKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIFtfdm0uX3YoIlBhdGNoIG1hY09TIHRvIHdvcmsgd2l0aCBvdXIgaGFyZHdhcmUiKV0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygidWwiLCBbCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiVGhpcyBjcmVhdGVzIGluc3RhYmlsaXR5IGFuZCB1bm5lY2Vzc2FyeSBwYXRjaGluZyBmb3IgbWFueSIKICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigiVGhlIDIgcGF0Y2hlcyB3ZSB1c2UgZm9yIHRoaXM6XG4iKSwKICAgICAgICAgICAgICBfYygidWwiLCBbCiAgICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiQXBwbGVDcHVQbUNmZ0xvY2siKV0pLAogICAgICAgICAgICAgICAgICBfdm0uX3YoIiBmb3IgQXBwbGVJbnRlbFBvd2VyTWFuYWdlbWVudC5rZXh0IikKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiQXBwbGVYY3BtQ2ZnTG9jayIpXSksCiAgICAgICAgICAgICAgICAgIF92bS5fdigiIGZvciB0aGUgS2VybmVsKFhOVSkiKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIFtfdm0uX3YoIlBhdGNoIG91ciBmaXJtd2FyZSB0byBzdXBwb3J0IE1TUiBFMiB3cml0ZSIpXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJ1bCIsIFsKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICJWZXJ5IG11Y2ggcHJlZmVycmVkLCBhcyBhdm9pZHMgcGF0Y2hpbmcgYWxsb3dpbmcgZm9yIGdyZWF0ZXIgZmxleGliaWxpdHkgcmVnYXJkaW5nIHN0YWJpbGl0eSBhbmQgT1MgdXBncmFkZXMiCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJOb3RlOiBQZW55cm4gYmFzZWQgbWFjaGluZXMgYWN0dWFsbHkgZG9uJ3QgbmVlZCB0byB3b3JyeSBhYm91dCB1bmxvY2tpbmcgdGhpcyByZWdpc3RlciIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogImRpc2FibGluZy1jZmctbG9jayIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjZGlzYWJsaW5nLWNmZy1sb2NrIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgRGlzYWJsaW5nIENGRyBMb2NrIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIlNvIHlvdSd2ZSBpbnN0YWxsZWQgbWFjT1MgYnV0IHlvdSdyZSB1c2luZyB0aG9zZSBwZXNreSAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIkNGRy1Mb2NrIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIHBhdGNoZXMgdGhhdCB3ZSB3YW50IHRvIGdldCByaWQgb2YsIHdlbGwgdG8gZG8gdGhpcyBpcyBmYWlybHkgc2ltcGxlLiBZb3UnbGwgbmVlZCB0aGUgZm9sbG93aW5nOiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX3ZtLl92KCJJbnNpZGUgeW91ciBFRkkvT0MvVG9vbHMgZm9sZGVyIGFuZCBjb25maWcucGxpc3Q6IildKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2dpdGh1Yi5jb20vYWNpZGFudGhlcmEvT3BlbkNvcmVQa2cvcmVsZWFzZXMiLAogICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJWZXJpZnlNc3JFMiIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgICAxCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9naXRodWIuY29tL2RhdGFzb25lL2dydWItbW9kLXNldHVwX3Zhci9yZWxlYXNlcyIsCiAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIk1vZGlmaWVkIEdSVUIgU2hlbGwiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgICAgMQogICAgICAgICAgKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX3ZtLl92KCJBbmQgc29tZSBhcHBzIHRvIGhlbHAgdXMgb3V0OiIpXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9naXRodWIuY29tL0xvbmdTb2Z0L1VFRklUb29sL3JlbGVhc2VzIiwKICAgICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiVUVGSVRvb2wiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgICAgMQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigiIChNYWtlIHN1cmUgaXQncyBVRUZJVG9vbCBhbmQgbm90IFVFRklFeHRyYWMpIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6CiAgICAgICAgICAgICAgICAgICJodHRwczovL2dpdGh1Yi5jb20vTG9uZ1NvZnQvVW5pdmVyc2FsLUlGUi1FeHRyYWN0b3IvcmVsZWFzZXMiLAogICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJVbml2ZXJzYWwtSUZSLUV4dHJhY3RvciIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgICAxCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiQW5kIGRvbid0IGZvcmdldCB0byBkaXNhYmxlIHRoZSBmb2xsb3dpbmcgZnJvbSB5b3VyIGNvbmZpZy5wbGlzdCB1bmRlciAiCiAgICAgICAgKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIktlcm5lbCAtPiBRdWlya3MiKV0pLAogICAgICAgIF92bS5fdigiOiIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFtfYygiY29kZSIsIFtfdm0uX3YoIkFwcGxlQ3B1UG1DZmdMb2NrIildKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfYygiY29kZSIsIFtfdm0uX3YoIkFwcGxlWGNwbUNmZ0xvY2siKV0pXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiQW5kIHRoZSBmaW5hbCBwYXJ0LCBncmFiYmluZyB5b3VyIEJJT1MgZnJvbSB0aGUgdmVuZG9ycycgd2Vic2l0ZS4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW192bS5fdigiTm93IHRoZSBmdW4gcGFydCEiKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogImNoZWNraW5nLWlmLWNmZy1sb2NrLWNhbi1iZS10dXJuZWQtb2ZmIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNjaGVja2luZy1pZi1jZmctbG9jay1jYW4tYmUtdHVybmVkLW9mZiIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIENoZWNraW5nIGlmIENGRy1Mb2NrIGNhbiBiZSB0dXJuZWQgb2ZmIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIkJvb3QgT3BlbkNvcmUgYW5kIHNlbGVjdCB0aGUgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJWZXJpZnlNc3JFMiIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBvcHRpb24gaW4gdGhlIHBpY2tlci4gVGhpcyB0b29sIHdpbGwgdGVsbCB5b3Ugd2hldGhlciB5b3VyIEJJT1Mgc3VwcG9ydHMgQ0ZHLUxvY2sgYW5kIGlmIGl0IGNhbiBiZSB1bmxvY2tlZC4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJ0dXJuaW5nLW9mZi1jZmctbG9jay1tYW51YWxseSIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjdHVybmluZy1vZmYtY2ZnLWxvY2stbWFudWFsbHkiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBUdXJuaW5nIG9mZiBDRkctTG9jayBtYW51YWxseSIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJPcGVuIHlvdXIgZmlybXdhcmUgd2l0aCBVRUZJVG9vbCBhbmQgdGhlbiBmaW5kICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiQ0ZHIExvY2siKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgYXMgYSBVbmljb2RlIHN0cmluZy4gSWYgbm90aGluZyBwb3BzIHVwIHRoZW4geW91ciBmaXJtd2FyZSBkb2Vzbid0IHN1cHBvcnQgIgogICAgICAgICksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJDRkcgTG9jayIpXSksCiAgICAgICAgX3ZtLl92KCIsIG90aGVyd2lzZSBjb250aW51ZSBvbi4iKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBzcmM6IHJlcXVpcmUoIi4uL2ltYWdlcy9leHRyYXMvbXNyLWxvY2stbWQvdWVmaS10b29sLnBuZyIpLAogICAgICAgICAgICBhbHQ6ICIiCiAgICAgICAgICB9CiAgICAgICAgfSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiWW91J2xsIGZpbmQgdGhhdCB0aGlzIHN0cmluZyBpcyBmb3VuZCB3aXRoaW4gYSBTZXR1cCBmb2xkZXIsIHJpZ2h0LWNsaWNrIGFuZCBleHBvcnQgYXMgIgogICAgICAgICksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJTZXR1cC5iaW4iKV0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJPcGVuIHlvdXIgc2V0dXAgZmlsZSB3aXRoICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiaWZyZXh0cmFjdCIpXSksCiAgICAgICAgX3ZtLl92KCIgYW5kIGV4cG9ydCBhcyBhIC50eHQgZmlsZSB3aXRoIHRlcm1pbmFsOiIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsYW5ndWFnZS0gZXh0cmEtY2xhc3MiIH0sIFsKICAgICAgICBfYygicHJlIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAibGFuZ3VhZ2UtdGV4dCIgfSB9LCBbCiAgICAgICAgICBfYygiY29kZSIsIFsKICAgICAgICAgICAgX3ZtLl92KCJwYXRoL3RvL2lmcmV4dHJhY3QgcGF0aC90by9TZXR1cC5iaW4gcGF0aC90by9TZXR1cC50eHRcbiIpCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIk9wZW4gdGhlIHRleHQgZmlsZSBhbmQgc2VhcmNoIGZvciAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIkNGRyBMb2NrLCBWYXJTdG9yZUluZm8gKFZhck9mZnNldC9WYXJOYW1lKToiKV0pLAogICAgICAgIF92bS5fdigiIGFuZCBub3RlIHRoZSBvZmZzZXQgcmlnaHQgYWZ0ZXIgaXQoaWU6ICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiMHg1QTQiKV0pLAogICAgICAgIF92bS5fdigiKSIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi4vaW1hZ2VzL2V4dHJhcy9tc3ItbG9jay1tZC9jZmctZmluZC5wbmciKSwKICAgICAgICAgICAgYWx0OiAiIgogICAgICAgICAgfQogICAgICAgIH0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJSdW4gdGhlIE1vZGlmaWVkIEdSVUIgU2hlbGwgYW5kIHBhc3RlIHRoZSBmb2xsb3dpbmcgd2hlcmUgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCIweDVBNCIpXSksCiAgICAgICAgX3ZtLl92KCIgaXMgcmVwbGFjZWQgd2l0aCB5b3VyIHZhbHVlOiIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsYW5ndWFnZS0gZXh0cmEtY2xhc3MiIH0sIFsKICAgICAgICBfYygicHJlIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAibGFuZ3VhZ2UtdGV4dCIgfSB9LCBbCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInNldHVwX3ZhciAweDVBNCAweDAwXG4iKV0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJEbyBub3RlIHRoYXQgdmFyaWFibGUgb2Zmc2V0cyBhcmUgdW5pcXVlIG5vdCBqdXN0IHRvIGVhY2ggbW90aGVyYm9hcmQgYnV0IGV2ZW4gdG8gaXRzIGZpcm13YXJlIHZlcnNpb24uICIKICAgICAgICApLAogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJOZXZlciB0cnkgdG8gdXNlIGFuIG9mZnNldCB3aXRob3V0IGNoZWNraW5nLiIpXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIkFuZCB5b3UncmUgZG9uZSEgTm93IHlvdSdsbCBoYXZlIGNvcnJlY3QgQ1BVIHBvd2VyIG1hbmFnZW1lbnQiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJOb3RlIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiOiBFdmVyeSB0aW1lIHlvdSByZXNldCB5b3VyIEJJT1MgeW91IHdpbGwgbmVlZCB0byBmbGlwIHRoaXMgYml0IGFnYWluLCBtYWtlIHN1cmUgdG8gd3JpdGUgaXQgZG93biB3aXRoIHRoZSBCSU9TIHZlcnNpb24gc28geW91IGtub3cgd2hpY2guIgogICAgICAgICkKICAgICAgXSkKICAgIF0KICApCn0KdmFyIHN0YXRpY1JlbmRlckZucyA9IFtdCnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZQoKZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfQ=="}]}